version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network

  # Next.js application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL}
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - CMC_API_KEY=${CMC_API_KEY}
      - RWA_API_KEY=${RWA_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"]
    #   interval: 30s
    #   timeout: 3s
    #   start_period: 40s
    #   retries: 3
    networks:
      - app-network
    # Don't expose ports directly in production - use nginx
    expose:
      - "3000"

  # Redis cache (optional - for future use)
  # redis:
  #   image: redis:7-alpine
  #   restart: unless-stopped
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - app-network
  #   command: redis-server --appendonly yes

networks:
  app-network:
    driver: bridge

# volumes:
#   redis-data: