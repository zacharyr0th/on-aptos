name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Code Quality and Testing
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    if: false
    outputs:
      preview-url: ${{ steps.vercel-deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Type check
        run: pnpm tsc --noEmit

      - name: Run tests with coverage
        run: pnpm test:run --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_SITE_URL: https://on-aptos.com
          APTOS_BUILD_SECRET: ${{ secrets.APTOS_BUILD_SECRET }}
          CMC_API_KEY: ${{ secrets.CMC_API_KEY }}
          RWA_API_KEY: ${{ secrets.RWA_API_KEY }}
          PANORA_API_KEY: ${{ secrets.PANORA_API_KEY }}

      - name: Bundle analyzer
        run: pnpm analyze
        env:
          ANALYZE: true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: .next/analyze/

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npx audit-ci --config ./audit-ci.json || true

  # Vercel Preview Deployment (for PRs and develop branch)
  deploy-preview:
    name: Deploy Preview to Vercel
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('**Vercel Preview Deployment**')
            );

            const body = `**Vercel Preview Deployment**

            Preview deployed successfully!

            **Preview URL:** ${{ steps.vercel-deploy.outputs.preview-url }}

            ---
            _Updated at ${new Date().toISOString()}_`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Vercel Production Deployment (main branch only)
  deploy-production:
    name: Deploy to Vercel Production
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: false
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Lighthouse Performance Audit
  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: false
    steps:
      - name: Send Discord notification
        if: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            **On Aptos Production Deployment**
            
            **Status:** ${{ needs.deploy-production.result }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Actor:** ${{ github.actor }}
            **URL:** https://on-aptos.com
            
            **Build:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-production.result }}
          text: |
            On Aptos deployed to production!
            
            **Status:** ${{ needs.deploy-production.result }}
            **URL:** https://on-aptos.com
            **Commit:** ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}