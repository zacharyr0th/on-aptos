"use client";

import { TrendingUp } from "lucide-react";
import React from "react";

import { StatCard } from "@/components/ui/StatCard";
import { useDefiMetrics } from "@/lib/hooks/useDefiMetrics";
import { formatCompactNumber } from "@/lib/utils";

interface StatsSectionProps {
  protocolCount: number;
  filteredCount: number;
  totalCount: number;
  selectedCategory: string;
  selectedSubcategory?: string;
}

export function StatsSection({ protocolCount }: StatsSectionProps) {
  const { metrics: defiMetrics, isLoading, error, isOffline } = useDefiMetrics();

  // Use live data with fallbacks
  const tvl = defiMetrics?.tvl ?? 0;
  const tvlChange24h = defiMetrics?.tvlChange24h ?? undefined;
  const spotVolume = defiMetrics?.spotVolume ?? 0;
  const volumeChange24h = defiMetrics?.volumeChange24h ?? undefined;
  const totalFees24h = defiMetrics?.fees?.total24h ?? 0;
  const feesChange24h = defiMetrics?.fees?.change24h ?? undefined;

  // Show friendly error state when data is unavailable
  const showErrorState = error && !isLoading;
  const showOfflineState = isOffline && !isLoading;

  return (
    <div className="mb-8">
      {/* Error State Banner */}
      {showErrorState && (
        <div className="mb-6 p-4 bg-yellow-100 dark:bg-yellow-900/20 border border-yellow-300 dark:border-yellow-800 rounded-lg">
          <div className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5 text-yellow-600 dark:text-yellow-400" />
            <div>
              <p className="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                {showOfflineState ? "DeFi data temporarily unavailable" : "Data loading issue"}
              </p>
              <p className="text-xs text-yellow-700 dark:text-yellow-300 mt-1">
                {showOfflineState
                  ? "We're having trouble connecting to our data provider. Please check your connection and try again."
                  : error}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Primary Metrics Row - Using StatCard component */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4 lg:gap-6 mb-6">
        <StatCard
          title="Total Value Locked"
          value={formatCompactNumber(tvl)}
          change={tvlChange24h !== undefined ? { value: tvlChange24h, period: "1d" } : undefined}
          tooltip="Total institutional and retail capital deployed across Aptos DeFi protocols"
          isLoading={isLoading}
          showError={!!showErrorState}
        />

        <StatCard
          title="24h Volume"
          value={formatCompactNumber(spotVolume)}
          change={
            volumeChange24h !== undefined ? { value: volumeChange24h, period: "1d" } : undefined
          }
          tooltip="Professional trading volume across institutional-grade Aptos DeFi protocols"
          isLoading={isLoading}
          showError={!!showErrorState}
        />

        <StatCard
          title="24h Fees"
          value={formatCompactNumber(totalFees24h)}
          change={feesChange24h !== undefined ? { value: feesChange24h, period: "1d" } : undefined}
          tooltip="Revenue generated by professional DeFi protocols across Aptos ecosystem"
          isLoading={isLoading}
          showError={!!showErrorState}
        />

        <StatCard
          title="Active Protocols"
          value={Math.floor(protocolCount).toString()}
          tooltip="Enterprise-grade DeFi protocols actively monitored across Aptos blockchain"
          isLoading={false}
          showError={false}
        />
      </div>
    </div>
  );
}
