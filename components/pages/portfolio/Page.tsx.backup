'use client';

import React, { useMemo, useState } from 'react';
import { GeistMono } from 'geist/font/mono';
import { useWallet } from '@aptos-labs/wallet-adapter-react';
import { useTheme } from 'next-themes';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  Table,
  TableHeader,
  TableBody,
  TableHead,
  TableRow,
  TableCell,
} from '@/components/ui/table';
import { Header } from '@/components/layout/Header';
import { Footer } from '@/components/layout/Footer';
import { WalletConnectButton } from '@/components/wallet/WalletConnectButton';
import {
  Briefcase,
  TrendingUp,
  TrendingDown,
  Coins,
  Image as ImageIcon,
  ArrowUpRight,
  ArrowDownRight,
  ExternalLink,
  Clock,
  Copy,
  X,
  AlertTriangle,
} from 'lucide-react';
import { trpc } from '@/lib/trpc/client';
import { usePortfolioHistoryV2 } from '@/hooks/usePortfolioHistoryV2';
import {
  formatCurrency,
  formatPercentage,
  formatTokenAmount,
} from '@/lib/utils/format';
import { formatAmount, convertRawTokenAmount } from '@/lib/utils';
import { getTokenLogoUrlWithFallback } from '@/lib/utils/token-logos';
import Image from 'next/image';
import Link from 'next/link';
import {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
} from '@/components/ui/chart';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  ResponsiveContainer,
  Area,
  AreaChart,
  PieChart,
  Pie,
  Cell,
  Scatter,
  ScatterChart,
  ReferenceDot,
} from 'recharts';
import { cn } from '@/lib/utils';
import {
  getProtocolLabel,
  isPhantomAsset as isPhantomAssetFromRegistry,
  getPhantomReason,
  shouldShowProtocolBadge,
} from '@/lib/protocol-registry';
import { NFTCard } from './NFTCard';
import { NFTAnalysis } from './NFTAnalysis';
import { NFTTransferHistory } from './NFTTransferHistory';
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
  TooltipProvider,
} from '@/components/ui/tooltip';
import { toast } from 'sonner';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuCheckboxItem,
} from '@/components/ui/dropdown-menu';
import {
  Filter,
  ChevronLeft,
  ChevronRight,
  ChevronDown,
  Eye,
} from 'lucide-react';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';

// Constants
const MIN_VALUE_THRESHOLD = 0.01;

// Protocol logo mapping - Comprehensive coverage for all protocols
const getProtocolLogo = (protocol: string): string => {
  const protocolName = protocol.toLowerCase();
  const logoMap: Record<string, string> = {
    // Core Aptos Infrastructure
    'aptos framework': '/icons/apt.png',
    'digital assets': '/icons/apt.png',
    'aptos token v2': '/icons/apt.png',

    // Liquid Staking Protocols
    amnis: '/icons/protocols/amnis.avif',
    'amnis finance': '/icons/protocols/amnis.avif',
    'thala liquid staking': '/icons/protocols/thala.avif',
    trufin: '/icons/protocols/trufin.webp',

    // Lending Protocols
    aries: '/icons/protocols/aries.avif',
    'aries markets': '/icons/protocols/aries.avif',
    aptin: '/icons/protocols/aptin.webp',
    'aptin finance': '/icons/protocols/aptin.webp',
    echelon: '/icons/protocols/echelon.avif',
    'echelon market': '/icons/protocols/echelon.avif',
    echo: '/icons/protocols/echo.webp',
    'echo lending': '/icons/protocols/echo.webp',
    meso: '/icons/protocols/meso.webp',
    'meso finance': '/icons/protocols/meso.webp',
    joule: '/icons/protocols/joule.webp',
    'joule finance': '/icons/protocols/joule.webp',
    superposition: '/icons/protocols/superposition.webp',
    aave: '/placeholder.jpg', // No specific logo available
    'thala cdp': '/icons/protocols/thala.avif',

    // DEX Protocols
    liquidswap: '/icons/protocols/liquidswap.webp',
    pancakeswap: '/icons/protocols/pancake.webp',
    pancake: '/icons/protocols/pancake.webp',
    sushi: '/icons/protocols/sushi.webp',
    sushiswap: '/icons/protocols/sushi.webp',
    cellana: '/icons/protocols/cellana.webp',
    'cellana finance': '/icons/protocols/cellana.webp',
    panora: '/icons/protocols/panora.webp',
    'panora exchange': '/icons/protocols/panora.webp',
    kana: '/icons/protocols/kana.webp',
    kanalabs: '/icons/protocols/kana.webp',
    hyperion: '/icons/protocols/hyperion.webp',
    econia: '/icons/protocols/econia.jpg',
    vibrantx: '/icons/protocols/vibrantx.png',
    'uptos pump': '/icons/protocols/pump-uptos.jpg',
    'pump-uptos': '/icons/protocols/pump-uptos.jpg',
    defy: '/placeholder.jpg', // No specific logo available
    'lucid finance': '/placeholder.jpg', // No specific logo available
    'pact labs': '/placeholder.jpg', // No specific logo available
    thetis: '/icons/protocols/thetis.webp',
    'thetis market': '/icons/protocols/thetis.webp',

    // Derivatives & Trading
    merkle: '/icons/protocols/merkle.webp',
    'merkle trade': '/icons/protocols/merkle.webp',

    // Farming Protocols
    thala: '/icons/protocols/thala.avif',
    'thala farm': '/icons/protocols/thala.avif',
    'thala infrastructure': '/icons/protocols/thala.avif',

    // Bridge Protocols
    layerzero: '/placeholder.jpg', // No specific logo available
    wormhole: '/placeholder.jpg', // No specific logo available
    celer: '/placeholder.jpg', // No specific logo available
    'celer bridge': '/placeholder.jpg', // No specific logo available

    // Other Protocols
    agdex: '/icons/protocols/agdex.webp',
    anqa: '/icons/protocols/anqa.webp',
    emojicoin: '/icons/protocols/emojicoin.webp',
    ichi: '/icons/protocols/ichi.jpg',
    metamove: '/icons/protocols/metamove.png',
    mirage: '/icons/protocols/mirage.webp',
    moar: '/icons/protocols/moar.webp',
    tapp: '/icons/protocols/tapp.jpg',
    crossmint: '/icons/protocols/crossmint.jpeg',
    eliza: '/icons/protocols/eliza.jpeg',
    tradeport: '/icons/protocols/tradeport.jpg',

    // Stablecoin Protocols
    usdc: '/icons/protocols/usdc.avif',
    usde: '/icons/protocols/usde.avif',
    usdt: '/icons/protocols/usdt.avif',

    // Additional protocol variations and aliases
    kofi: '/icons/protocols/kofi.avif',
    'sushi finance': '/icons/protocols/sushi.webp',
    'pancake finance': '/icons/protocols/pancake.webp',
    'liquid swap': '/icons/protocols/liquidswap.webp',
    'merkle finance': '/icons/protocols/merkle.webp',
  };

  return logoMap[protocolName] || '/placeholder.jpg';
};

interface NFT {
  token_data_id: string;
  token_name: string;
  collection_name: string;
  token_uri: string;
  description?: string;
  property_version_v1: number;
  amount: number;
  cdn_image_uri?: string;
  cdn_animation_uri?: string;
  collection_description?: string;
  creator_address?: string;
  collection_uri?: string;
  last_transaction_version?: number;
  last_transaction_timestamp?: string;
}

const formatTimestamp = (timestamp: string | undefined) => {
  if (!timestamp) return 'Unknown';

  try {
    // Handle different timestamp formats
    let date: Date;
    if (timestamp.includes('-') || timestamp.includes('T')) {
      // ISO format timestamp
      date = new Date(timestamp);
    } else {
      // Unix timestamp (in microseconds for Aptos)
      const numTimestamp = Number(timestamp);
      if (isNaN(numTimestamp)) return 'Invalid date';
      date = new Date(numTimestamp / 1000);
    }

    if (isNaN(date.getTime())) return 'Invalid date';
    return date.toLocaleString();
  } catch (error) {
    return 'Invalid date';
  }
};

// Use the centralized protocol registry for phantom asset detection and DeFi TVL filtering
const isPhantomAsset = (assetType: string, metadata?: any): boolean => {
  return isPhantomAssetFromRegistry(assetType, metadata);
};

type SortField = 'timestamp' | 'type' | 'amount' | 'asset';
type SortDirection = 'asc' | 'desc';

const copyToClipboard = async (text: string, label: string) => {
  try {
    await navigator.clipboard.writeText(text);
    toast.success(`${label} copied to clipboard`);
  } catch (err) {
    toast.error('Failed to copy to clipboard');
  }
};

const AptPriceDisplay = () => {
  // Use tRPC to fetch APT price
  const { data: aptPriceData } =
    trpc.domains.marketData.prices.getCMCPrice.useQuery(
      { symbol: 'apt' },
      {
        staleTime: 60 * 1000, // 1 minute
        gcTime: 5 * 60 * 1000, // 5 minutes
        refetchInterval: 60 * 1000, // Auto-refetch every minute
        refetchIntervalInBackground: true,
        retry: 3,
      }
    );

  const price = aptPriceData?.data?.price;

  return (
    <div className={`text-sm text-center ${GeistMono.className}`}>
      {price ? (
        <span className="font-medium">${price.toFixed(2)}</span>
      ) : (
        <span className="text-muted-foreground">Loading...</span>
      )}
    </div>
  );
};

export default function PortfolioPage() {
  const { connected, account, wallet } = useWallet();
  const { theme, resolvedTheme } = useTheme();
  const walletAddress = account?.address?.toString();
  const [showAccountSwitcher, setShowAccountSwitcher] = useState(false);
  const [nftPage, setNftPage] = useState(0);
  const [selectedNFT, setSelectedNFT] = useState<NFT | null>(null);
  const [selectedAsset, setSelectedAsset] = useState<any>(null);
  const [activeTab, setActiveTab] = useState<'performance' | 'transactions'>('performance');
  const [showOnlyVerified, setShowOnlyVerified] = useState(() => {
    // Load preference from localStorage, default to true
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('portfolio-show-only-verified');
      return saved === null ? true : saved === 'true';
    }
    return true;
  });
  const [showOnlyDeFiTVL, setShowOnlyDeFiTVL] = useState(() => {
    // Load preference from localStorage, default to false
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('portfolio-show-only-defi-tvl');
      return saved === 'true';
    }
    return false;
  });
  const [defiSortBy, setDefiSortBy] = useState<'default' | 'type' | 'value'>('default');
  const [defiSortOrder, setDefiSortOrder] = useState<'asc' | 'desc'>('asc');
  const NFT_LIMIT = 20;

  // Save preferences when they change
  React.useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem(
        'portfolio-show-only-verified',
        showOnlyVerified.toString()
      );
    }
  }, [showOnlyVerified]);

  React.useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem(
        'portfolio-show-only-defi-tvl',
        showOnlyDeFiTVL.toString()
      );
    }
  }, [showOnlyDeFiTVL]);

  // Add click handler to detect clicks outside asset table and tabs
  React.useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement;

      // Check if click is outside the asset table and tabs area
      const isInsideAssetTable = target.closest('.asset-table-container');
      const isInsideTabsArea = target.closest('.tabs-container');
      const isInsideAssetDetails = target.closest('.asset-details-card');

      if (!isInsideAssetTable && !isInsideTabsArea && !isInsideAssetDetails) {
        if (selectedAsset) setSelectedAsset(null);
        if (selectedNFT) setSelectedNFT(null);
      }
    };

    document.addEventListener('click', handleClickOutside);
    return () => {
      document.removeEventListener('click', handleClickOutside);
    };
  }, [selectedAsset, selectedNFT]);

  const handleAccountSwitch = async (accountAddress: string) => {
    try {
      // Account switching functionality would go here
      toast.info('Account switching not yet implemented');
    } catch (error) {
      toast.error('Failed to switch account');
    }
  };

  const [sidebarView, setSidebarView] = useState<'assets' | 'nfts' | 'defi'>('assets');
  const [expandedPositions, setExpandedPositions] = useState<Set<string>>(new Set());
  const [selectedDeFiPosition, setSelectedDeFiPosition] = useState<any>(null);
  const [showProtocolAddresses, setShowProtocolAddresses] = useState(false);

  // Update active tab when sidebar view changes
  React.useEffect(() => {
    // Keep current tab when switching between assets/nfts/defi
    // This allows users to view different content types in the same tab
    if (activeTab !== 'performance' && activeTab !== 'transactions') {
      setActiveTab('performance');
    }
  }, [sidebarView, selectedAsset, activeTab]);

  const [sortField, setSortField] = useState<SortField>('timestamp');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  const [transactionFilters, setTransactionFilters] = useState<{
    deposits: boolean;
    withdrawals: boolean;
    swaps: boolean;
    other: boolean;
    assetType?: string;
  }>({
    deposits: true,
    withdrawals: true,
    swaps: true,
    other: true,
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedTransaction, setSelectedTransaction] = useState<any>(null);
  const [isTransactionDialogOpen, setIsTransactionDialogOpen] = useState(false);
  const ITEMS_PER_PAGE = 10;

  const {
    data: portfolioAssets,
    isLoading: assetsLoading,
    error: assetsError,
    refetch: refetchAssets,
  } = trpc.domains.blockchain.portfolio.getWalletAssets.useQuery(
    { walletAddress: walletAddress || '', showOnlyVerified },
    {
      enabled: !!walletAddress,
      refetchInterval: 15000, // Reduced to 15 seconds for more frequent updates
      staleTime: 5000, // Reduced to 5 seconds
      refetchOnWindowFocus: true, // Refetch when user returns to tab
      refetchOnReconnect: true, // Refetch on network reconnect
    }
  );

  const {
    data: transactionHistory,
    isLoading: transactionHistoryLoading,
    error: transactionError,
  } = trpc.domains.blockchain.transactions.getTransactions.useQuery(
    {
      walletAddress: walletAddress || '',
      limit: 50,
      filter: { verifiedOnly: showOnlyVerified },
    },
    {
      enabled: !!walletAddress,
      refetchInterval: 60000,
      staleTime: 30000,
    }
  );

  // Debug logging
  React.useEffect(() => {
    console.log('Transaction History Data:', transactionHistory);
    console.log('Transaction History Loading:', transactionHistoryLoading);
    console.log('Transaction History Error:', transactionError);
    if (transactionHistory?.data) {
      console.log(
        'Transaction History Length:',
        transactionHistory.data.length
      );
    }
  }, [transactionHistory, transactionHistoryLoading, transactionError]);

  const { data: portfolioMetrics, isLoading: metricsLoading } =
    trpc.domains.blockchain.portfolio.getPortfolioMetrics.useQuery(
      { walletAddress: walletAddress || '', showOnlyVerified },
      {
        enabled: !!walletAddress,
        refetchInterval: 15000, // Match assets refresh rate
        staleTime: 5000,
        refetchOnWindowFocus: true,
        refetchOnReconnect: true,
      }
    );

  // Use the new V2 API hook - use current wallet address
  const {
    data: portfolioHistory,
    isLoading: portfolioHistoryLoading,
    error: portfolioHistoryError,
  } = usePortfolioHistoryV2(walletAddress || null);

  // For now, we'll use portfolio history as asset price history
  // This can be enhanced later when individual asset price history endpoints are available
  const assetPriceHistory = portfolioHistory;

  // ANS queries
  const { data: primaryName, isLoading: primaryNameLoading } =
    trpc.domains.blockchain.portfolio.getPrimaryName.useQuery(
      { walletAddress: walletAddress || '' },
      {
        enabled: !!walletAddress,
        refetchInterval: 300000, // 5 minutes - ANS names don't change often
        staleTime: 180000, // 3 minutes
      }
    );

  const { data: accountNames, isLoading: accountNamesLoading } =
    trpc.domains.blockchain.portfolio.getAccountNames.useQuery(
      { walletAddress: walletAddress || '' },
      {
        enabled: !!walletAddress,
        refetchInterval: 300000, // 5 minutes
        staleTime: 180000, // 3 minutes
      }
    );

  const { data: accountDomains, isLoading: accountDomainsLoading } =
    trpc.domains.blockchain.portfolio.getAccountDomains.useQuery(
      { walletAddress: walletAddress || '' },
      {
        enabled: !!walletAddress,
        refetchInterval: 300000, // 5 minutes
        staleTime: 180000, // 3 minutes
      }
    );

  // DeFi positions query
  const { data: defiPositions, isLoading: defiPositionsLoading } =
    trpc.domains.blockchain.portfolio.getDeFiPositions.useQuery(
      { walletAddress: walletAddress || '' },
      {
        enabled: !!walletAddress,
        refetchInterval: 60000, // 1 minute
        staleTime: 30000, // 30 seconds
      }
    );

  const { data: defiStats, isLoading: defiStatsLoading } =
    trpc.domains.blockchain.portfolio.getDeFiStats.useQuery(
      { walletAddress: walletAddress || '' },
      {
        enabled: !!walletAddress,
        refetchInterval: 60000, // 1 minute
        staleTime: 30000, // 30 seconds
      }
    );

  // NFT query
  const {
    data: nfts,
    isLoading: nftsLoading,
    refetch: refetchNFTs,
  } = trpc.domains.blockchain.portfolio.getWalletNFTs.useQuery(
    {
      walletAddress: walletAddress || '',
      limit: NFT_LIMIT,
      offset: nftPage * NFT_LIMIT,
    },
    {
      enabled: !!walletAddress && sidebarView === 'nfts',
      refetchInterval: 60000, // 1 minute
      staleTime: 30000,
    }
  );

  // Group NFTs by collection
  const nftsByCollection = useMemo(() => {
    if (!nfts || nfts.length === 0) return {};

    try {
      return nfts.reduce(
        (acc, nft) => {
          if (!nft || typeof nft !== 'object') {
            console.warn('Invalid NFT object:', nft);
            return acc;
          }

          const collection = nft.collection_name || 'Unknown Collection';
          if (!acc[collection]) {
            acc[collection] = [];
          }
          acc[collection].push(nft);
          return acc;
        },
        {} as Record<string, NFT[]>
      );
    } catch (error) {
      console.error('Error grouping NFTs by collection:', error);
      return {};
    }
  }, [nfts]);

  const assets = useMemo(() => {
    if (!portfolioAssets) return [];
    return portfolioAssets;
  }, [portfolioAssets]);

  const visibleAssets = useMemo(() => {
    return assets.filter(asset => {
      // Must have minimum value threshold
      if ((asset.value || 0) < 0.1) return false;

      // If DeFi TVL filter is enabled, only show assets that are part of DeFi protocol TVL
      if (showOnlyDeFiTVL) {
        // Must have protocol info indicating DeFi TVL participation
        if (!asset.protocolInfo) return false;

        // Check if the protocol type indicates DeFi TVL (exclude bridges and infrastructure)
        const isDeFiTVLAsset =
          asset.protocolInfo.protocolType !== 'bridge' &&
          asset.protocolInfo.protocolType !== 'infrastructure';
        return isDeFiTVLAsset;
      }

      // If DeFi TVL filter is disabled, show all assets above the value threshold
      return true;
    });
  }, [assets, showOnlyDeFiTVL]);

  // Group DeFi positions by protocol
  const groupedDeFiPositions = useMemo(() => {
    if (!defiPositions || defiPositions.length === 0) return [];

    const groupedMap = new Map<string, {
      protocol: string;
      protocolLabel: string;
      protocolType: string;
      protocolTypes: Set<string>;
      addresses: string[];
      positions: typeof defiPositions;
      totalValue: number;
      position: {
        supplied?: any[];
        borrowed?: any[];
        staked?: any[];
        liquidity?: any[];
        derivatives?: any[];
      };
    }>();

    // Helper function to get base protocol name
    const getBaseProtocolName = (protocolName: string): string => {
      // Extract base protocol name by removing common suffixes
      const suffixes = [' CDP', ' Farm', ' Infrastructure', ' Liquid Staking', ' LSD', ' LST', ' AMM', ' DEX', ' Lending'];
      let baseName = protocolName;
      
      for (const suffix of suffixes) {
        if (baseName.endsWith(suffix)) {
          baseName = baseName.slice(0, -suffix.length).trim();
          break;
        }
      }
      
      // Remove 'Finance' from protocol names
      if (baseName.endsWith(' Finance')) {
        baseName = baseName.slice(0, -8).trim();
      }
      
      return baseName;
    };

    // Group positions by base protocol name
    defiPositions.forEach((position) => {
      const baseProtocolName = getBaseProtocolName(position.protocol);
      const existing = groupedMap.get(baseProtocolName);
      
      if (existing) {
        // Add to existing protocol group
        if (!existing.addresses.includes(position.address)) {
          existing.addresses.push(position.address);
        }
        existing.positions.push(position);
        existing.totalValue += position.totalValue;
        existing.protocolTypes.add(position.protocolType);
        
        // Aggregate position details
        if (position.position.supplied) {
          existing.position.supplied = [...(existing.position.supplied || []), ...position.position.supplied];
        }
        if (position.position.borrowed) {
          existing.position.borrowed = [...(existing.position.borrowed || []), ...position.position.borrowed];
        }
        if (position.position.staked) {
          existing.position.staked = [...(existing.position.staked || []), ...position.position.staked];
        }
        if (position.position.liquidity) {
          existing.position.liquidity = [...(existing.position.liquidity || []), ...position.position.liquidity];
        }
        if (position.position.derivatives) {
          existing.position.derivatives = [...(existing.position.derivatives || []), ...position.position.derivatives];
        }
      } else {
        // Create new protocol group
        groupedMap.set(baseProtocolName, {
          protocol: baseProtocolName,
          protocolLabel: position.protocolLabel.split(' - ')[0] || position.protocolLabel, // Get base label
          protocolType: position.protocolType,
          protocolTypes: new Set([position.protocolType]),
          addresses: [position.address],
          positions: [position],
          totalValue: position.totalValue,
          position: {
            supplied: position.position.supplied,
            borrowed: position.position.borrowed,
            staked: position.position.staked,
            liquidity: position.position.liquidity,
            derivatives: position.position.derivatives,
          },
        });
      }
    });

    // Convert map to array and sort by total value
    return Array.from(groupedMap.values()).sort((a, b) => b.totalValue - a.totalValue);
  }, [defiPositions]);

  const transactions = useMemo(() => {
    if (!transactionHistory?.data) return [];

    // Create set of verified asset types for quick lookup
    const verifiedAssetTypes = new Set(
      showOnlyVerified
        ? (portfolioAssets || [])
            .filter(asset => asset.isVerified !== false)
            .map(asset => asset.asset_type)
        : []
    );

    const categorizedTransactions = transactionHistory.data
      .filter(tx => {
        // If showOnlyVerified is true, filter out unverified assets
        if (showOnlyVerified && tx.asset_type) {
          return verifiedAssetTypes.has(tx.asset_type);
        }
        return true;
      })
      .map(tx => {
        let category: 'deposit' | 'withdrawal' | 'swap' | 'other' = 'other';

        if (tx.type) {
          const lowerType = tx.type.toLowerCase();
          if (lowerType.includes('swap') || lowerType.includes('exchange')) {
            category = 'swap';
          } else if (
            lowerType.includes('deposit') ||
            lowerType.includes('mint')
          ) {
            category = 'deposit';
          } else if (
            lowerType.includes('withdraw') ||
            lowerType.includes('burn')
          ) {
            category = 'withdrawal';
          }
        }

        // Map new transaction format to old format for compatibility
        return {
          ...tx,
          category,
          transaction_timestamp: tx.timestamp,
          transaction_version: tx.version,
          is_transaction_success: tx.success,
        };
      });

    return categorizedTransactions;
  }, [transactionHistory, showOnlyVerified, portfolioAssets]);

  const { sortedTransactions, paginatedTransactions, totalPages, filteredCount } =
    useMemo(() => {
      const filtered = transactions.filter(tx => {
        if (tx.category === 'deposit' && !transactionFilters.deposits)
          return false;
        if (tx.category === 'withdrawal' && !transactionFilters.withdrawals)
          return false;
        if (tx.category === 'swap' && !transactionFilters.swaps) return false;
        if (tx.category === 'other' && !transactionFilters.other) return false;
        if (
          transactionFilters.assetType &&
          tx.asset_type !== transactionFilters.assetType
        )
          return false;
        return true;
      });

      const sorted = [...filtered].sort((a, b) => {
        let compareValue = 0;

        switch (sortField) {
          case 'timestamp':
            const timestampA = a.transaction_timestamp
              ? Number(a.transaction_timestamp)
              : 0;
            const timestampB = b.transaction_timestamp
              ? Number(b.transaction_timestamp)
              : 0;
            compareValue = timestampA - timestampB;
            break;
          case 'type':
            const typeA = a.type || '';
            const typeB = b.type || '';
            compareValue = typeA.localeCompare(typeB);
            break;
          case 'amount':
            const amountA = a.amount ? Number(a.amount) : 0;
            const amountB = b.amount ? Number(b.amount) : 0;
            compareValue =
              (isNaN(amountA) ? 0 : amountA) - (isNaN(amountB) ? 0 : amountB);
            break;
          case 'asset':
            const assetA = a.asset_type || '';
            const assetB = b.asset_type || '';
            compareValue = assetA.localeCompare(assetB);
            break;
        }

        return sortDirection === 'asc' ? compareValue : -compareValue;
      });

      const totalPages = Math.ceil(sorted.length / ITEMS_PER_PAGE);
      const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
      const endIndex = startIndex + ITEMS_PER_PAGE;
      const paginatedTransactions = sorted.slice(startIndex, endIndex);

      return {
        sortedTransactions: sorted,
        paginatedTransactions,
        totalPages,
        filteredCount: sorted.length,
      };
    }, [
      transactions,
      sortField,
      sortDirection,
      transactionFilters,
      currentPage,
    ]);

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };

  React.useEffect(() => {
    setCurrentPage(1);
  }, [transactionFilters]);

  const isLoading =
    assetsLoading ||
    transactionHistoryLoading ||
    metricsLoading ||
    portfolioHistoryLoading ||
    (sidebarView === 'nfts' && nftsLoading);
  const allDataLoaded = !isLoading;
  const isANSLoading =
    primaryNameLoading || accountNamesLoading || accountDomainsLoading;

  const portfolioValue7d = useMemo(() => {
    if (!portfolioHistory?.length) return null;

    const current =
      portfolioHistory[portfolioHistory.length - 1]?.totalValue || 0;
    const previous = portfolioHistory[0]?.totalValue || 0;
    const change = current - previous;
    const percentChange = previous > 0 ? (change / previous) * 100 : 0;
    return {
      current,
      previous,
      change,
      percentChange,
    };
  }, [portfolioHistory]);

  if (!connected) {
    return (
      <div className={cn("min-h-screen flex flex-col", GeistMono.className)}>
        <div className="fixed top-0 left-0 right-0 h-1 z-50">
          <div className="h-full bg-gradient-to-r from-primary/20 to-primary/40"></div>
        </div>

        <div className="container-layout pt-6">
          <Header />
        </div>

        <main className="container-layout py-6 flex-1 flex items-center justify-center">
          {/* Background gradient */}
          <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/10 pointer-events-none" />

          <div className="relative w-full max-w-7xl grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-8 md:gap-12 items-center">
            {/* Left Side - Big Text */}
            <div className="space-y-4 sm:space-y-6 text-center lg:text-left">
              <h1 className="text-3xl xs:text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-bold leading-tight">
                <span className="block text-primary bg-gradient-to-r from-primary via-primary to-primary/70 bg-clip-text text-transparent">
                  A Complete
                </span>
                <span className="block text-muted-foreground -mt-1 sm:-mt-2">
                  Overview
                </span>
              </h1>

              <p className="text-base sm:text-lg md:text-xl text-muted-foreground leading-relaxed max-w-lg mx-auto lg:mx-0 mb-6 sm:mb-8">
                Track all your assets, DeFi positions, and NFTs in real-time
                across the Aptos ecosystem
              </p>

              {/* CTA Button */}
              <div className="flex justify-center lg:justify-start">
                <WalletConnectButton size="default" />
              </div>
            </div>

            {/* Right Side - Logo with Text */}
            <div className="relative flex justify-center order-first lg:order-last">
              {/* Large APT Logo Background */}
              <div className="relative flex items-center justify-center">
                <div className="w-48 h-48 xs:w-56 xs:h-56 sm:w-64 sm:h-64 md:w-72 md:h-72 lg:w-80 lg:h-80 opacity-15 dark:opacity-25">
                  <Image
                    src="/icons/apt.png"
                    alt="Aptos"
                    width={320}
                    height={320}
                    className="object-contain dark:invert w-full h-full"
                    onError={e => {
                      const img = e.target as HTMLImageElement;
                      img.src = '/placeholder.jpg';
                    }
                  />
                </div>
              </div>
            </div>
          </div>
        </main>

        <Footer />
      </div>
    );
  }

  return (
    <div className={cn("min-h-screen flex flex-col", GeistMono.className)}>
      <div className="container-layout pt-6">
        <Header />
      </div>

      <main className="container-layout py-6 flex-1">
        {!allDataLoaded ? (
          <div className="space-y-4 sm:space-y-6">
            <div className="flex flex-col sm:flex-row sm:items-center bg-card border rounded-lg py-3 sm:py-4 px-4 sm:px-6 gap-3 sm:gap-0">
              <div className="flex-grow">
                <div className="flex items-center gap-2 sm:gap-3 mb-2">
                  <Briefcase className="h-4 w-4 sm:h-5 sm:w-5 text-muted-foreground" />
                  <h1 className="text-xl sm:text-2xl font-bold">
                    My Portfolio
                  </h1>
                </div>
                <Skeleton className="h-3 sm:h-4 w-32 sm:w-48" />
              </div>
              <div className="flex flex-col items-start sm:items-end gap-1">
                <Skeleton className="h-6 sm:h-8 w-24 sm:w-32" />
                <Skeleton className="h-3 sm:h-4 w-12 sm:w-16" />
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-5 gap-4 sm:gap-6 lg:gap-8">
              <div className="lg:col-span-2 space-y-4 sm:space-y-6">
                <div className="space-y-3 sm:space-y-4">
                  <Skeleton className="h-6 sm:h-8 w-full" />
                  {Array.from({ length: 5 }).map((_, i) => (
                    <Skeleton key={i} className="h-12 sm:h-16 w-full" />
                  ))}
                </div>
              </div>

              <div className="lg:col-span-3">
                <div className="space-y-4 sm:space-y-6">
                  <Skeleton className="h-10 sm:h-12 w-full" />
                  <Skeleton className="h-64 sm:h-80 lg:h-96 w-full" />
                </div>
              </div>
            </div>
          </div>
        ) : (
          <>
            <div className="flex items-center bg-card border rounded-lg py-3 px-4 mb-6">
              <div className="flex-grow">
                <h2 className="text-base sm:text-lg font-medium text-card-foreground">
                  Portfolio Value
                </h2>
                <p className="text-xl sm:text-2xl font-bold text-card-foreground font-mono">
                  {formatCurrency(portfolioMetrics?.totalValue || 0)}
                  {walletAddress && (
                    <span className="text-base font-normal text-muted-foreground ml-2 font-mono">
                      <button
                        onClick={() =>
                          copyToClipboard(walletAddress, 'Account address')
                        }
                        className="hover:text-muted-foreground transition-all duration-200 flex items-center gap-1 group relative overflow-hidden"
                      >
                        <span className="font-mono transition-all duration-200 group-hover:opacity-0 group-hover:absolute">
                          {walletAddress.slice(0, 6)}...
                          {walletAddress.slice(-4)}
                        </span>
                        <span className="font-mono transition-all duration-200 opacity-0 group-hover:opacity-100 absolute group-hover:relative whitespace-nowrap">
                          {walletAddress}
                        </span>
                        <Copy className="h-3 w-3 sm:h-4 sm:w-4 ml-1 flex-shrink-0" />
                      </button>
                      {accountNames && accountNames.length > 0 && (
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <div className="flex items-center gap-1 px-2 py-1 bg-primary/10 rounded text-xs text-primary ml-1">
                                <span>{accountNames.length} ANS</span>
                              </div>
                            </TooltipTrigger>
                            <TooltipContent>
                              <div className="max-w-xs">
                                <p className="font-medium mb-1">
                                  ANS Names ({accountNames.length}):
                                </p>
                                <div className="space-y-1">
                                  {accountNames
                                    .slice(0, 5)
                                    .map((name, index) => (
                                      <p
                                        key={index}
                                        className="text-xs font-mono"
                                      >
                                        {name}
                                      </p>
                                    ))}
                                  {accountNames.length > 5 && (
                                    <p className="text-xs text-muted-foreground">
                                      +{accountNames.length - 5} more
                                    </p>
                                  )}
                                </div>
                              </div>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                      )}
                    </span>
                  )}
                </p>
              </div>
              <div className="flex flex-col items-center">
                <div className="p-2 mb-1">
                  <Image
                    src="/icons/apt.png"
                    alt="APT"
                    width={32}
                    height={32}
                    className="object-contain dark:invert"
                    priority={false}
                    quality={90}
                    onError={e => {
                      const img = e.target as HTMLImageElement;
                      img.src = '/placeholder.jpg';
                    }}
                  />
                </div>
                <AptPriceDisplay />
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-5 gap-4 sm:gap-6 lg:gap-8">
              <div className="lg:col-span-2 space-y-4 sm:space-y-6">
                {wallet?.accounts && wallet.accounts.length > 1 && (
                  <div className="mb-4">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button
                          variant="outline"
                          size="sm"
                          className="h-8 gap-2"
                          aria-label="Switch account"
                          aria-haspopup="menu"
                        >
                          <span className="font-mono text-xs">
                            {walletAddress?.slice(0, 6)}...
                            {walletAddress?.slice(-4)}
                          </span>
                          <ChevronDown className="h-3 w-3" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="start" className="w-64">
                        <DropdownMenuLabel>Switch Account</DropdownMenuLabel>
                        <DropdownMenuSeparator />
                        {wallet.accounts.map((acc, index) => (
                          <DropdownMenuItem
                            key={acc.address}
                            onClick={() => handleAccountSwitch(acc.address)}
                            className="flex items-center justify-between"
                          >
                            <div className="flex flex-col">
                              <span className="font-mono text-xs">
                                {acc.address.slice(0, 8)}...
                                {acc.address.slice(-6)}
                              </span>
                              <span className="text-xs text-muted-foreground">
                                Account {index + 1}
                              </span>
                            </div>
                            {acc.address === walletAddress && (
                              <div className="h-2 w-2 bg-green-500 rounded-full" />
                            )}
                          </DropdownMenuItem>
                        ))}
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                )}
                <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-2 mb-4 sm:mb-6">
                  <div className="flex items-center gap-6">
                    <span
                      onClick={() => {
                        setSidebarView('assets');
                        setNftPage(0);
                      }}
                      className={cn(
                        "text-lg font-semibold cursor-pointer transition-colors",
                        sidebarView === 'assets'
                          ? "text-foreground"
                          : "text-muted-foreground hover:text-foreground"
                      )}
                      aria-label="View assets"
                    >
                      Tokens
                    </span>
                    <span
                      onClick={() => {
                        setSidebarView('nfts');
                        setNftPage(0);
                      }}
                      className={cn(
                        "text-lg font-semibold cursor-pointer transition-colors",
                        sidebarView === 'nfts'
                          ? "text-foreground"
                          : "text-muted-foreground hover:text-foreground"
                      )}
                      aria-label="View NFTs"
                    >
                      NFTs
                    </span>
                    <span
                      onClick={() => {
                        setSidebarView('defi');
                        setNftPage(0);
                      }}
                      className={cn(
                        "text-lg font-semibold cursor-pointer transition-colors",
                        sidebarView === 'defi'
                          ? "text-foreground"
                          : "text-muted-foreground hover:text-foreground"
                      )}
                      aria-label="View DeFi positions"
                    >
                      DeFi
                    </span>
                  </div>
                </div>
                {sidebarView === 'assets' ? (
                  <div className="space-y-4 asset-table-container">
                    {visibleAssets.length > 0 ? (
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead className="w-[50%] min-w-[140px]">
                              Asset
                            </TableHead>
                            <TableHead className="hidden sm:table-cell w-[25%] min-w-[80px]">
                              Amount
                            </TableHead>
                            <TableHead className="w-[25%] min-w-[70px]">
                              Value
                            </TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {visibleAssets.map((asset, index) => (
                            <TableRow
                              key={`asset-${asset.asset_type}-${asset.amount}-${index}`}
                              className={cn(
                                'cursor-pointer hover:bg-muted/50 transition-colors',
                                selectedAsset?.asset_type ===
                                  asset.asset_type && 'bg-muted/50'
                              )}
                              onClick={() => {
                                setSelectedAsset(asset);
                                setActiveTab('performance');
                              }}
                            >
                              <TableCell className="w-[50%] min-w-[140px]">
                                <div className="flex items-center gap-2">
                                  <div className="h-6 w-6 sm:h-8 sm:w-8 rounded-full flex items-center justify-center">
                                    <Image
                                      src={getTokenLogoUrlWithFallback(
                                        asset.asset_type,
                                        asset.metadata
                                      )}
                                      alt={asset.metadata?.symbol || 'Asset'}
                                      width={32}
                                      height={32}
                                      className={`rounded-full object-cover w-full h-full ${
                                        asset.metadata?.symbol?.toUpperCase() ===
                                          'APT' ||
                                        asset.asset_type.includes('aptos_coin')
                                          ? 'dark:invert'
                                          : ''
                                      }`}
                                      onError={e => {
                                        const img =
                                          e.target as HTMLImageElement;
                                        const symbol = asset.metadata?.symbol;
                                        // Try PNG if SVG fails
                                        if (
                                          img.src.includes('.svg') &&
                                          symbol
                                        ) {
                                          img.src = `https://raw.githubusercontent.com/PanoraExchange/Aptos-Tokens/main/logos/${symbol}.png`;
                                        } else {
                                          img.src = '/placeholder.jpg';
                                        }
                                      }}
                                    />
                                  </div>
                                  <div className="min-w-0 flex-1">
                                    <div className="flex items-center gap-2">
                                      <span className="font-medium text-sm sm:text-base truncate">
                                        {asset.metadata?.symbol || 'Unknown'}
                                      </span>
                                      {asset.protocolInfo && (
                                        <Badge
                                          variant="secondary"
                                          className="text-xs px-1.5 py-0.5 h-5"
                                        >
                                          {asset.protocolInfo.protocolLabel}
                                        </Badge>
                                      )}
                                      {!showOnlyVerified &&
                                        asset.isVerified === false && (
                                          <Tooltip>
                                            <TooltipTrigger asChild>
                                              <Badge
                                                variant="outline"
                                                className="text-xs px-1 py-0"
                                              >
                                                Unverified
                                              </Badge>
                                            </TooltipTrigger>
                                            <TooltipContent>
                                              <p>
                                                This token is not verified by
                                                Panora Exchange
                                              </p>
                                            </TooltipContent>
                                          </Tooltip>
                                        )}
                                    </div>
                                    <div className="text-xs text-muted-foreground sm:hidden font-mono text-left">
                                      {formatTokenAmount(
                                        asset.balance || 0,
                                        undefined,
                                        { showSymbol: false }
                                      )}
                                    </div>
                                  </div>
                                </div>
                              </TableCell>
                              <TableCell className="hidden sm:table-cell w-[25%] min-w-[80px] text-left">
                                <div className="text-sm font-mono">
                                  {formatTokenAmount(
                                    asset.balance || 0,
                                    undefined,
                                    { showSymbol: false }
                                  )}
                                </div>
                              </TableCell>
                              <TableCell className="w-[25%] min-w-[70px]">
                                <div className="font-medium text-sm sm:text-base font-mono">
                                  {formatCurrency(asset.value || 0)}
                                </div>
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    ) : (
                      <div className="text-center py-8 text-muted-foreground">
                        <Coins className="h-12 w-12 mx-auto mb-4 opacity-50" />
                        <p>
                          {showOnlyVerified
                            ? 'No verified assets found'
                            : 'No assets found'}
                        </p>
                        {showOnlyVerified &&
                          portfolioAssets &&
                          portfolioAssets.length === 0 && (
                            <p className="text-sm mt-2">
                              Try disabling the &quot;Verified tokens only&quot;
                              filter to see all assets
                            </p>
                          )}
                      </div>
                    )}
                  </div>
                ) : sidebarView === 'nfts' ? (
                  <div className="space-y-4">
                    {nftsLoading ? (
                      <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                        {Array.from({ length: 6 }).map((_, i) => (
                          <div key={i} className="space-y-2">
                            <Skeleton className="aspect-square rounded-xl" />
                            <Skeleton className="h-4 w-3/4" />
                            <Skeleton className="h-3 w-1/2" />
                          </div>
                        ))}
                      </div>
                    ) : nfts && nfts.length > 0 ? (
                      <div className="grid grid-cols-2 gap-3">
                        {nfts.map((nft, index) => {
                          if (!nft || !nft.token_data_id) {
                            console.warn('Invalid NFT data:', nft);
                            return null;
                          }

                          const uniqueKey = `${nft.collection_name}-${nft.token_data_id}-${nft.token_name}-${index}`;
                          const isSelected =
                            selectedNFT?.token_data_id === nft.token_data_id;

                          return (
                            <div
                              key={uniqueKey}
                              className={cn(
                                'relative group cursor-pointer transition-all duration-200',
                                isSelected &&
                                  'ring-2 ring-primary ring-offset-2'
                              )}
                              onClick={() => {
                                setSelectedNFT(nft);
                                setActiveTab('nft-analysis');
                              }}
                            >
                              <div className="aspect-square rounded-lg overflow-hidden border hover:border-primary transition-colors">
                                {(() => {
                                  const imageUrl =
                                    nft.cdn_image_uri || nft.token_uri;
                                  if (!imageUrl) {
                                    return (
                                      <div className="relative w-full h-full">
                                        <Image
                                          src="/placeholder.jpg"
                                          alt={nft.token_name}
                                          fill
                                          sizes="(max-width: 768px) 50vw, 33vw"
                                          className="object-cover"
                                        />
                                      </div>
                                    );
                                  }

                                  try {
                                    const url = new URL(imageUrl);
                                    if (
                                      !['http:', 'https:'].includes(
                                        url.protocol
                                      )
                                    ) {
                                      throw new Error('Invalid protocol');
                                    }

                                    return (
                                      <div className="relative w-full h-full">
                                        <Image
                                          src={imageUrl}
                                          alt={nft.token_name}
                                          fill
                                          sizes="(max-width: 768px) 50vw, 33vw"
                                          className="object-cover group-hover:scale-105 transition-transform duration-200"
                                          onError={e => {
                                            const img =
                                              e.currentTarget as HTMLImageElement;
                                            img.src = '/placeholder.jpg';
                                          }}
                                        />
                                      </div>
                                    );
                                  } catch (error) {
                                    console.warn(
                                      'Invalid NFT image URL:',
                                      imageUrl,
                                      error
                                    );
                                    return (
                                      <div className="relative w-full h-full">
                                        <Image
                                          src="/placeholder.jpg"
                                          alt={nft.token_name}
                                          fill
                                          sizes="(max-width: 768px) 50vw, 33vw"
                                          className="object-cover"
                                        />
                                      </div>
                                    );
                                  }
                                })()}
                                {nft.amount > 1 && (
                                  <div className="absolute top-2 right-2 bg-background/80 backdrop-blur-sm rounded px-2 py-1 text-xs font-medium">
                                    x{nft.amount}
                                  </div>
                                )}
                              </div>
                              <div className="mt-2">
                                <p
                                  className="text-sm font-medium truncate"
                                  title={nft.token_name}
                                >
                                  {nft.token_name}
                                </p>
                                <p
                                  className="text-xs text-muted-foreground truncate"
                                  title={nft.collection_name}
                                >
                                  {nft.collection_name}
                                </p>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-muted-foreground">
                        <ImageIcon className="h-12 w-12 mx-auto mb-4 opacity-50" />
                        <p>No NFTs found</p>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {defiPositionsLoading ? (
                      <div className="space-y-3">
                        {Array.from({ length: 4 }).map((_, i) => (
                          <div key={i} className="border rounded-lg p-3">
                            <div className="flex items-center gap-3">
                              <Skeleton className="h-8 w-8 rounded-full" />
                              <div className="flex-1">
                                <Skeleton className="h-4 w-24 mb-1" />
                                <Skeleton className="h-3 w-16" />
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : groupedDeFiPositions && groupedDeFiPositions.length > 0 ? (
                      <div className="space-y-4 defi-table-container">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead className="w-[50%]">Protocol</TableHead>
                              <TableHead 
                                className="w-[30%] cursor-pointer hover:text-primary transition-colors"
                                onClick={() => {
                                  if (defiSortBy === 'type') {
                                    setDefiSortOrder(defiSortOrder === 'asc' ? 'desc' : 'asc');
                                  } else {
                                    setDefiSortBy('type');
                                    setDefiSortOrder('asc');
                                  }
                                }}
                              >
                                Type {defiSortBy === 'type' && (defiSortOrder === 'asc' ? '↑' : '↓')}
                              </TableHead>
                              <TableHead 
                                className="w-[20%] text-right cursor-pointer hover:text-primary transition-colors"
                                onClick={() => {
                                  if (defiSortBy === 'value') {
                                    setDefiSortOrder(defiSortOrder === 'asc' ? 'desc' : 'asc');
                                  } else {
                                    setDefiSortBy('value');
                                    setDefiSortOrder('desc');
                                  }
                                }}
                              >
                                Value {defiSortBy === 'value' && (defiSortOrder === 'asc' ? '↑' : '↓')}
                              </TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {(() => {
                              let sortedPositions = [...groupedDeFiPositions];
                              
                              if (defiSortBy === 'type') {
                                sortedPositions.sort((a, b) => {
                                  const typeA = Array.from(a.protocolTypes)[0];
                                  const typeB = Array.from(b.protocolTypes)[0];
                                  const displayA = typeA === 'derivatives' ? 'perps' : typeA;
                                  const displayB = typeB === 'derivatives' ? 'perps' : typeB;
                                  
                                  if (defiSortOrder === 'asc') {
                                    return displayA.localeCompare(displayB);
                                  } else {
                                    return displayB.localeCompare(displayA);
                                  }
                                });
                              } else if (defiSortBy === 'value') {
                                sortedPositions.sort((a, b) => {
                                  if (defiSortOrder === 'asc') {
                                    return a.totalValue - b.totalValue;
                                  } else {
                                    return b.totalValue - a.totalValue;
                                  }
                                });
                              }
                              
                              return sortedPositions.map((groupedPosition, index) => {
                              const positionId = `defi-${groupedPosition.protocol}-${index}`;
                              const isSelected = selectedDeFiPosition?.protocol === groupedPosition.protocol;
                              const primaryType = Array.from(groupedPosition.protocolTypes)[0];
                              
                              return (
                                <TableRow
                                  key={positionId}
                                  className={cn(
                                    'cursor-pointer transition-all duration-200',
                                    isSelected && 'bg-muted/50'
                                  )}
                                  onClick={() => {
                                    setSelectedDeFiPosition(groupedPosition);
                                    setActiveTab('performance');
                                  }}
                                >
                                  <TableCell className="py-2">
                                    <div className="flex items-center gap-2">
                                      <div className="relative w-8 h-8 rounded-full overflow-hidden bg-background border flex-shrink-0">
                                        <Image
                                          src={getProtocolLogo(groupedPosition.protocol)}
                                          alt={`${groupedPosition.protocol} logo`}
                                          fill
                                          className="object-cover"
                                          sizes="32px"
                                          onError={e => {
                                            const img = e.target as HTMLImageElement;
                                            img.src = '/placeholder.jpg';
                                          }}
                                        />
                                      </div>
                                      <span className="font-medium text-sm truncate">
                                        {groupedPosition.protocol}
                                      </span>
                                      {groupedPosition.protocol.toLowerCase() === 'aptin' && (
                                        <TooltipProvider>
                                          <Tooltip>
                                            <TooltipTrigger asChild>
                                              <div className="flex items-center">
                                                <AlertTriangle className="h-4 w-4 text-red-500 ml-1 cursor-help" />
                                              </div>
                                            </TooltipTrigger>
                                            <TooltipContent className="bg-red-500 text-white border-red-600">
                                              <p className="text-sm font-medium">This protocol is deprecated</p>
                                              <p className="text-sm">It's recommended to remove your assets</p>
                                            </TooltipContent>
                                          </Tooltip>
                                        </TooltipProvider>
                                      )}
                                    </div>
                                  </TableCell>
                                  <TableCell className="py-2">
                                    <div className="flex items-center gap-1 flex-wrap">
                                      <Badge variant="secondary" className="text-xs px-2 py-0.5">
                                        {groupedPosition.protocolTypes.size > 1 
                                          ? 'Multiple' 
                                          : primaryType === 'derivatives' 
                                            ? 'Perps'
                                            : primaryType.replace('_', ' ').split(' ').map(word => 
                                                word.charAt(0).toUpperCase() + word.slice(1)
                                              ).join(' ')}
                                      </Badge>
                                    </div>
                                  </TableCell>
                                  <TableCell className="text-right py-2">
                                    <div className="font-medium text-sm font-mono">
                                      {formatCurrency(groupedPosition.totalValue)}
                                    </div>
                                  </TableCell>
                                </TableRow>
                              );
                            });
                            })()}
                          </TableBody>
                        </Table>
                      </div>
                    ) : (
                      <div className="text-center py-8 text-muted-foreground">
                        <TrendingUp className="h-12 w-12 mx-auto mb-4 opacity-50" />
                        <p>No DeFi positions found</p>
                      </div>
                    )}
                  </div>
                )}
              </div>

              <div className="lg:col-span-3 tabs-container">
                <Tabs
                  value={activeTab}
                  onValueChange={setActiveTab}
                  className="space-y-4 sm:space-y-6"
                >
                  <TabsList className="grid grid-cols-2 w-full">
                    <TabsTrigger
                      value="performance"
                      className="text-xs sm:text-sm"
                    >
                      {selectedAsset
                        ? `${selectedAsset.metadata?.symbol || 'Asset'} Details`
                        : selectedNFT
                        ? selectedNFT.token_name.length > 20
                          ? 'Selected NFT'
                          : `${selectedNFT.token_name} Details`
                        : sidebarView === 'defi'
                        ? selectedDeFiPosition
                          ? `${selectedDeFiPosition.protocol} Stats`
                          : 'Stats'
                        : 'Performance'}
                    </TabsTrigger>
                    <TabsTrigger
                      value="transactions"
                      className="text-xs sm:text-sm"
                    >
                      Transactions
                    </TabsTrigger>
                  </TabsList>

                  <TabsContent
                    value="performance"
                    className="space-y-4 sm:space-y-6"
                    onClick={(e) => {
                      // Reset to overall stats when clicking outside the card but inside the tab content
                      if (sidebarView === 'defi' && selectedDeFiPosition && e.target === e.currentTarget) {
                        setSelectedDeFiPosition(null);
                      }
                    }}
                  >
                    {sidebarView === 'nfts' && (
                      <NFTAnalysis
                        nfts={nfts || []}
                        nftsByCollection={nftsByCollection}
                        selectedNFT={selectedNFT}
                      />
                    )}
                    {sidebarView === 'assets' && (
                      <div className="space-y-4 sm:space-y-6">
                      {selectedAsset && (
                        <Card className="mb-4 asset-details-card">
                          <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-3">
                                <Image
                                  src={getTokenLogoUrlWithFallback(
                                    selectedAsset.asset_type,
                                    selectedAsset.metadata
                                  )}
                                  alt={
                                    selectedAsset.metadata?.symbol || 'Asset'
                                  }
                                  width={40}
                                  height={40}
                                  className={`rounded-full object-cover ${
                                    selectedAsset.metadata?.symbol?.toUpperCase() ===
                                      'APT' ||
                                    selectedAsset.asset_type.includes(
                                      'aptos_coin'
                                    )
                                      ? 'dark:invert'
                                      : ''
                                  }`}
                                  onError={e => {
                                    const img = e.target as HTMLImageElement;
                                    img.src = '/placeholder.jpg';
                                  }}
                                />
                                <div>
                                  <h3 className="font-semibold">
                                    {selectedAsset.metadata?.name ||
                                      selectedAsset.metadata?.symbol ||
                                      'Unknown'}
                                  </h3>
                                  <p className="text-sm text-muted-foreground">
                                    {selectedAsset.metadata?.symbol ||
                                      'Unknown'}
                                  </p>
                                </div>
                              </div>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => setSelectedAsset(null)}
                                className="h-8"
                              >
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          </CardHeader>
                          <CardContent>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <p className="text-sm text-muted-foreground mb-1">
                                  Token Address
                                </p>
                                <div className="flex items-center gap-2">
                                  <code className="text-xs bg-muted px-2 py-1 rounded break-all">
                                    {selectedAsset.asset_type}
                                  </code>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    className="h-6 w-6 p-0"
                                    onClick={() =>
                                      copyToClipboard(
                                        selectedAsset.asset_type,
                                        'Token address'
                                      )
                                    }
                                  >
                                    <Copy className="h-3 w-3" />
                                  </Button>
                                </div>
                              </div>
                              <div>
                                <p className="text-sm text-muted-foreground mb-1">
                                  Balance
                                </p>
                                <p className="text-sm font-medium">
                                  {formatTokenAmount(
                                    convertRawTokenAmount(
                                      selectedAsset.amount,
                                      selectedAsset.metadata?.decimals || 8,
                                      selectedAsset.asset_type
                                    ),
                                    selectedAsset.metadata?.symbol
                                  )}{' '}
                                  {selectedAsset.metadata?.symbol}
                                </p>
                              </div>
                              <div>
                                <p className="text-sm text-muted-foreground mb-1">
                                  Value
                                </p>
                                <p className="text-sm font-medium">
                                  {formatCurrency(selectedAsset.value || 0)}
                                </p>
                              </div>
                              {selectedAsset.metadata?.decimals && (
                                <div>
                                  <p className="text-sm text-muted-foreground mb-1">
                                    Decimals
                                  </p>
                                  <p className="text-sm font-medium">
                                    {selectedAsset.metadata.decimals}
                                  </p>
                                </div>
                              )}
                            </div>
                            {selectedAsset.metadata?.symbol && (
                              <div className="mt-6 pt-6 border-t">
                                <h4 className="text-sm font-medium mb-3">
                                  Recent Transactions
                                </h4>
                                <div className="space-y-2">
                                  {(() => {
                                    const assetTransactions = transactions
                                      .filter(
                                        tx =>
                                          tx.asset_type ===
                                          selectedAsset.asset_type
                                      )
                                      .slice(0, 5);

                                    if (assetTransactions.length === 0) {
                                      return (
                                        <p className="text-sm text-muted-foreground">
                                          No recent transactions
                                        </p>
                                      );
                                    }

                                    return assetTransactions.map((tx, idx) => (
                                      <div
                                        key={`asset-tx-${selectedAsset.asset_type}-${tx.transaction_version}-${tx.transaction_timestamp}-${idx}`}
                                        className="flex items-center justify-between py-2 border-b last:border-0"
                                      >
                                        <div className="flex items-center gap-3">
                                          <div
                                            className={cn(
                                              'h-8 w-8 rounded-full flex items-center justify-center',
                                              tx.type.includes('deposit') ||
                                                tx.type.includes('mint')
                                                ? 'bg-green-100 dark:bg-green-900/20'
                                                : tx.type.includes(
                                                      'withdraw'
                                                    ) ||
                                                    tx.type.includes('burn')
                                                  ? 'bg-red-100 dark:bg-red-900/20'
                                                  : 'bg-blue-100 dark:bg-blue-900/20'
                                            )}
                                          >
                                            {tx.type.includes('deposit') ||
                                            tx.type.includes('mint') ? (
                                              <ArrowDownRight className="h-4 w-4 text-green-600 dark:text-green-400" />
                                            ) : tx.type.includes('withdraw') ||
                                              tx.type.includes('burn') ? (
                                              <ArrowUpRight className="h-4 w-4 text-red-600 dark:text-red-400" />
                                            ) : (
                                              <ArrowUpRight className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                                            )}
                                          </div>
                                          <div>
                                            <p className="text-sm font-medium">
                                              {tx.type.includes('deposit')
                                                ? 'Deposit'
                                                : tx.type.includes('withdraw')
                                                  ? 'Withdraw'
                                                  : tx.type.includes('mint')
                                                    ? 'Mint'
                                                    : tx.type.includes('burn')
                                                      ? 'Burn'
                                                      : tx.type.includes('swap')
                                                        ? 'Swap'
                                                        : 'Transfer'}
                                            </p>
                                            <p className="text-xs text-muted-foreground">
                                              {
                                                formatTimestamp(
                                                  tx.transaction_timestamp
                                                ).split(',')[0]
                                              }
                                            </p>
                                          </div>
                                        </div>
                                        <div className="text-right">
                                          {tx.amount && (
                                            <p className="text-sm font-medium">
                                              {formatTokenAmount(
                                                convertRawTokenAmount(
                                                  tx.amount,
                                                  selectedAsset.metadata
                                                    ?.decimals || 8,
                                                  selectedAsset.asset_type
                                                ),
                                                selectedAsset.metadata?.symbol
                                              )}{' '}
                                              {selectedAsset.metadata?.symbol}
                                            </p>
                                          )}
                                          <a
                                            href={`https://explorer.aptoslabs.com/txn/${tx.transaction_version}?network=mainnet`}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="text-xs text-primary hover:underline inline-flex items-center gap-1"
                                          >
                                            View
                                            <ExternalLink className="h-3 w-3" />
                                          </a>
                                        </div>
                                      </div>
                                    ));
                                  })()}
                                </div>
                                {transactions.filter(
                                  tx =>
                                    tx.asset_type === selectedAsset.asset_type
                                ).length > 5 && (
                                  <div className="mt-3 text-center">
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => {
                                        // Switch to transactions tab and apply filter
                                        setTransactionFilters(prev => ({
                                          ...prev,
                                          assetType: selectedAsset.asset_type,
                                        }));
                                        setActiveTab('transactions');
                                      }}
                                      className="text-xs"
                                    >
                                      View all {selectedAsset.metadata?.symbol}{' '}
                                      transactions
                                    </Button>
                                  </div>
                                )}
                              </div>
                            )}
                          </CardContent>
                        </Card>
                      )}
                      {selectedNFT && (
                        <Card className="mb-4 asset-details-card">
                          <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-3">
                                <div className="w-10 h-10 rounded-xl overflow-hidden border bg-background">
                                  {(() => {
                                    const imageUrl =
                                      selectedNFT.cdn_image_uri ||
                                      selectedNFT.token_uri;
                                    if (!imageUrl) {
                                      return (
                                        <div className="w-full h-full bg-gradient-to-br from-muted to-muted/50 flex items-center justify-center">
                                          <span className="text-muted-foreground text-lg font-bold">
                                            {selectedNFT.token_name
                                              .charAt(0)
                                              .toUpperCase()}
                                          </span>
                                        </div>
                                      );
                                    }

                                    try {
                                      const url = new URL(imageUrl);
                                      if (
                                        !['http:', 'https:'].includes(
                                          url.protocol
                                        )
                                      ) {
                                        throw new Error('Invalid protocol');
                                      }

                                      return (
                                        <Image
                                          src={imageUrl}
                                          alt={selectedNFT.token_name}
                                          width={40}
                                          height={40}
                                          className="object-cover w-full h-full"
                                          onError={e => {
                                            const img =
                                              e.target as HTMLImageElement;
                                            img.src = '/placeholder.jpg';
                                          }}
                                        />
                                      );
                                    } catch (error) {
                                      return (
                                        <Image
                                          src="/placeholder.jpg"
                                          alt={selectedNFT.token_name}
                                          width={40}
                                          height={40}
                                          className="object-cover w-full h-full"
                                        />
                                      );
                                    }
                                  })()}
                                </div>
                                <div className="min-w-0 flex-1">
                                  <h3 className="font-semibold truncate">
                                    {selectedNFT.token_name}
                                  </h3>
                                  <p className="text-sm text-muted-foreground truncate">
                                    {selectedNFT.collection_name}
                                  </p>
                                </div>
                              </div>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => setSelectedNFT(null)}
                                className="h-8"
                              >
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          </CardHeader>
                          <CardContent>
                            {/* NFT Image */}
                            <div className="mb-6">
                              <div className="relative aspect-square max-w-md mx-auto rounded-xl overflow-hidden border bg-muted">
                                {(() => {
                                  const imageUrl =
                                    selectedNFT.cdn_image_uri ||
                                    selectedNFT.token_uri;
                                  if (!imageUrl) {
                                    return (
                                      <div className="w-full h-full bg-gradient-to-br from-muted to-muted/50 flex items-center justify-center">
                                        <div className="text-center">
                                          <div className="text-6xl font-bold text-muted-foreground/50 mb-2">
                                            {selectedNFT.token_name
                                              .charAt(0)
                                              .toUpperCase()}
                                          </div>
                                          <p className="text-sm text-muted-foreground">
                                            No image available
                                          </p>
                                        </div>
                                      </div>
                                    );
                                  }

                                  try {
                                    const url = new URL(imageUrl);
                                    if (
                                      !['http:', 'https:'].includes(
                                        url.protocol
                                      )
                                    ) {
                                      throw new Error('Invalid protocol');
                                    }

                                    return (
                                      <Image
                                        src={imageUrl}
                                        alt={selectedNFT.token_name}
                                        fill
                                        className="object-contain"
                                        sizes="(max-width: 768px) 100vw, 50vw"
                                        onError={e => {
                                          const img =
                                            e.currentTarget as HTMLImageElement;
                                          img.src = '/placeholder.jpg';
                                        }}
                                      />
                                    );
                                  } catch (error) {
                                    return (
                                      <Image
                                        src="/placeholder.jpg"
                                        alt={selectedNFT.token_name}
                                        fill
                                        className="object-contain"
                                        sizes="(max-width: 768px) 100vw, 50vw"
                                      />
                                    );
                                  }
                                })()}
                              </div>
                            </div>

                            {/* NFT Details */}
                            <div className="space-y-4">
                              {selectedNFT.description && (
                                <div>
                                  <h4 className="text-sm font-medium mb-2">
                                    Description
                                  </h4>
                                  <p className="text-sm text-muted-foreground leading-relaxed">
                                    {selectedNFT.description}
                                  </p>
                                </div>
                              )}

                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                  <h4 className="text-sm font-medium mb-1">
                                    Token Name
                                  </h4>
                                  <p className="text-sm text-muted-foreground">
                                    {selectedNFT.token_name}
                                  </p>
                                </div>

                                <div>
                                  <h4 className="text-sm font-medium mb-1">
                                    Collection
                                  </h4>
                                  <p className="text-sm text-muted-foreground">
                                    {selectedNFT.collection_name}
                                  </p>
                                </div>

                                <div>
                                  <h4 className="text-sm font-medium mb-1">
                                    Amount Owned
                                  </h4>
                                  <p className="text-sm text-muted-foreground">
                                    {selectedNFT.amount}
                                  </p>
                                </div>

                                <div>
                                  <h4 className="text-sm font-medium mb-1">
                                    Property Version
                                  </h4>
                                  <p className="text-sm text-muted-foreground">
                                    v{selectedNFT.property_version_v1}
                                  </p>
                                </div>

                                {selectedNFT.creator_address && (
                                  <div className="md:col-span-2">
                                    <h4 className="text-sm font-medium mb-1">
                                      Creator
                                    </h4>
                                    <div className="flex items-center gap-2">
                                      <p className="text-sm text-muted-foreground font-mono">
                                        {selectedNFT.creator_address.slice(
                                          0,
                                          8
                                        )}
                                        ...
                                        {selectedNFT.creator_address.slice(-6)}
                                      </p>
                                      <Button
                                        variant="ghost"
                                        size="sm"
                                        className="h-6 w-6 p-0"
                                        onClick={() =>
                                          copyToClipboard(
                                            selectedNFT.creator_address!,
                                            'Creator address'
                                          )
                                        }
                                      >
                                        <Copy className="h-3 w-3" />
                                      </Button>
                                    </div>
                                  </div>
                                )}

                                {selectedNFT.last_transaction_timestamp && (
                                  <div className="md:col-span-2">
                                    <h4 className="text-sm font-medium mb-1">
                                      Last Transaction
                                    </h4>
                                    <p className="text-sm text-muted-foreground">
                                      {formatTimestamp(
                                        selectedNFT.last_transaction_timestamp
                                      )}
                                    </p>
                                  </div>
                                )}
                              </div>

                              {/* Technical Details */}
                              <div className="border-t pt-4">
                                <h4 className="text-sm font-medium mb-3">
                                  Technical Details
                                </h4>
                                <div className="space-y-3">
                                  <div>
                                    <span className="text-xs text-muted-foreground">
                                      Token Data ID:
                                    </span>
                                    <div className="flex items-center gap-2 mt-1">
                                      <code className="text-xs bg-muted px-2 py-1 rounded break-all">
                                        {selectedNFT.token_data_id.slice(0, 40)}
                                        ...
                                      </code>
                                      <Button
                                        variant="ghost"
                                        size="sm"
                                        className="h-6 w-6 p-0"
                                        onClick={() =>
                                          copyToClipboard(
                                            selectedNFT.token_data_id,
                                            'Token Data ID'
                                          )
                                        }
                                      >
                                        <Copy className="h-3 w-3" />
                                      </Button>
                                    </div>
                                  </div>

                                  {selectedNFT.token_uri && (
                                    <div>
                                      <span className="text-xs text-muted-foreground">
                                        Token URI:
                                      </span>
                                      <div className="flex items-center gap-2 mt-1">
                                        <a
                                          href={selectedNFT.token_uri}
                                          target="_blank"
                                          rel="noopener noreferrer"
                                          className="text-xs text-primary hover:underline truncate max-w-[300px]"
                                        >
                                          {selectedNFT.token_uri}
                                        </a>
                                        <ExternalLink className="h-3 w-3 text-primary flex-shrink-0" />
                                      </div>
                                    </div>
                                  )}

                                  {selectedNFT.collection_uri && (
                                    <div>
                                      <span className="text-xs text-muted-foreground">
                                        Collection URI:
                                      </span>
                                      <div className="flex items-center gap-2 mt-1">
                                        <a
                                          href={selectedNFT.collection_uri}
                                          target="_blank"
                                          rel="noopener noreferrer"
                                          className="text-xs text-primary hover:underline truncate max-w-[300px]"
                                        >
                                          {selectedNFT.collection_uri}
                                        </a>
                                        <ExternalLink className="h-3 w-3 text-primary flex-shrink-0" />
                                      </div>
                                    </div>
                                  )}

                                  {selectedNFT.last_transaction_version && (
                                    <div>
                                      <span className="text-xs text-muted-foreground">
                                        Transaction Version:
                                      </span>
                                      <p className="text-xs font-mono mt-1">
                                        {selectedNFT.last_transaction_version}
                                      </p>
                                    </div>
                                  )}
                                </div>
                              </div>

                              {/* Transfer History */}
                              <NFTTransferHistory
                                tokenDataId={selectedNFT.token_data_id}
                              />
                            </div>
                          </CardContent>
                        </Card>
                      )}
                      {!selectedAsset && !selectedNFT && (
                        <Card>
                          <CardHeader className="pb-2 px-4 sm:px-6">
                            <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-2">
                              <div className="flex items-center gap-2">
                                <CardTitle className="text-lg sm:text-xl">
                                  Portfolio Performance
                                </CardTitle>
                              </div>
                              <div className="text-left sm:text-right">
                                <div className="text-sm text-muted-foreground">
                                  7d
                                </div>
                                <div className="text-sm font-medium">
                                  {portfolioValue7d ? (
                                    <span
                                      className={cn(
                                        'block sm:text-right',
                                        portfolioValue7d.change >= 0
                                          ? 'text-green-600'
                                          : 'text-red-600'
                                      )}
                                    >
                                      <span className="sm:hidden">
                                        {portfolioValue7d.change >= 0
                                          ? '+'
                                          : ''}
                                        {formatCurrency(
                                          portfolioValue7d.change
                                        )}
                                      </span>
                                      <span className="hidden sm:inline">
                                        {portfolioValue7d.change >= 0
                                          ? '+'
                                          : ''}
                                        {formatCurrency(
                                          portfolioValue7d.change
                                        )}{' '}
                                        |{' '}
                                        {portfolioValue7d.percentChange >= 0
                                          ? '+'
                                          : ''}
                                        {formatPercentage(
                                          portfolioValue7d.percentChange
                                        )}
                                      </span>
                                    </span>
                                  ) : (
                                    <span className="text-muted-foreground">
                                      -
                                    </span>
                                  )}
                                </div>
                              </div>
                            </div>
                          </CardHeader>
                          <CardContent className="pt-2 pb-4 sm:pb-6 px-4 sm:px-6">
                            {portfolioHistory && portfolioHistory.length > 0 ? (
                              <div className="w-full">
                                <ChartContainer
                                  config={{
                                    value: {
                                      label: 'Portfolio Value',
                                      color: 'hsl(var(--chart-1))',
                                    },
                                  }}
                                  className="h-[200px] sm:h-[250px] lg:h-[300px] w-full"
                                >
                                  <ResponsiveContainer
                                    width="100%"
                                    height="100%"
                                  >
                                    <AreaChart data={portfolioHistory}>
                                      <defs>
                                        <linearGradient
                                          id="colorValue"
                                          x1="0"
                                          y1="0"
                                          x2="0"
                                          y2="1"
                                        >
                                          <stop
                                            offset="5%"
                                            stopColor="hsl(var(--chart-1))"
                                            stopOpacity={
                                              resolvedTheme === 'dark'
                                                ? 0.5
                                                : 0.3
                                            }
                                          />
                                          <stop
                                            offset="95%"
                                            stopColor="hsl(var(--chart-1))"
                                            stopOpacity={0}
                                          />
                                        </linearGradient>
                                      </defs>
                                      <CartesianGrid
                                        strokeDasharray="3 3"
                                        className="stroke-muted"
                                      />
                                      <XAxis
                                        dataKey="date"
                                        className="text-xs"
                                        tickFormatter={value =>
                                          new Date(value).toLocaleDateString(
                                            'en-US',
                                            { month: 'short', day: 'numeric' }
                                          )
                                        }
                                      />
                                      <YAxis
                                        className="text-xs"
                                        tickFormatter={value => {
                                          if (value === 0) return '$0';
                                          if (value >= 1000000)
                                            return `$${(value / 1000000).toFixed(1)}M`;
                                          if (value >= 1000)
                                            return `$${(value / 1000).toFixed(1)}k`;
                                          return `$${value.toFixed(2)}`;
                                        }}
                                      />
                                      <ChartTooltip
                                        content={({
                                          active,
                                          payload,
                                          label,
                                        }) => {
                                          if (
                                            active &&
                                            payload &&
                                            payload.length &&
                                            label
                                          ) {
                                            const data = payload[0].payload;
                                            return (
                                              <div className="bg-background border border-border rounded-lg p-3 shadow-lg">
                                                <p className="font-medium">
                                                  {new Date(
                                                    label
                                                  ).toLocaleDateString(
                                                    'en-US',
                                                    {
                                                      month: 'short',
                                                      day: 'numeric',
                                                      year: 'numeric',
                                                    }
                                                  )}
                                                </p>
                                                <p className="text-sm text-muted-foreground">
                                                  Portfolio Value:{' '}
                                                  <span className="font-medium text-foreground">
                                                    {formatCurrency(
                                                      payload[0].value
                                                    )}
                                                  </span>
                                                </p>
                                                {data.rateLimited && (
                                                  <div className="flex items-center gap-1 mt-1">
                                                    <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                                                    <span className="text-xs text-yellow-600">
                                                      Rate Limited
                                                    </span>
                                                  </div>
                                                )}
                                              </div>
                                            );
                                          }
                                          return null;
                                        }}
                                      />
                                      <Area
                                        type="monotone"
                                        dataKey="totalValue"
                                        stroke="hsl(var(--chart-1))"
                                        fillOpacity={1}
                                        fill="url(#colorValue)"
                                        strokeWidth={2}
                                      />
                                      {/* Add reference dots for rate-limited data points */}
                                      {portfolioHistory.map((entry, index) => {
                                        if (entry.rateLimited) {
                                          return (
                                            <ReferenceDot
                                              key={`rate-limit-${index}`}
                                              x={entry.date}
                                              y={entry.totalValue}
                                              r={4}
                                              fill="#f59e0b"
                                              stroke="#d97706"
                                              strokeWidth={1}
                                              fillOpacity={0.8}
                                            />
                                          );
                                        }
                                        return null;
                                      })}
                                    </AreaChart>
                                  </ResponsiveContainer>
                                </ChartContainer>
                                {/* Rate limit legend */}
                                {portfolioHistory.some(
                                  entry => entry.rateLimited
                                ) && (
                                  <div className="flex items-center justify-center mt-2 text-xs text-muted-foreground">
                                    <div className="flex items-center gap-1">
                                      <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                                      <span>
                                        Rate limited prices (may be less
                                        accurate)
                                      </span>
                                    </div>
                                  </div>
                                )}
                              </div>
                            ) : (
                              <div className="h-[200px] sm:h-[250px] lg:h-[300px] flex items-center justify-center text-muted-foreground">
                                <div className="text-center">
                                  <TrendingUp className="h-8 w-8 sm:h-12 sm:w-12 mx-auto mb-4 opacity-50" />
                                  <p className="text-sm sm:text-base">
                                    No performance data available
                                  </p>
                                </div>
                              </div>
                            )}
                          </CardContent>
                        </Card>
                      )}
                      </div>
                    )}
                    {sidebarView === 'defi' && (
                      <div className="space-y-4" onClick={(e) => e.stopPropagation()}>
                        {selectedDeFiPosition ? (
                          /* Individual Protocol Details */
                          <div className="space-y-4">
                            {/* Protocol Header */}
                            <Card className="border-l-4 border-l-primary">
                              <CardHeader className="pb-3">
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center gap-3">
                                    <div className="relative w-10 h-10 rounded-xl overflow-hidden bg-gradient-to-br from-primary/10 to-primary/5 border border-primary/20">
                                      <Image
                                        src={getProtocolLogo(selectedDeFiPosition.protocol)}
                                        alt={`${selectedDeFiPosition.protocol} logo`}
                                        fill
                                        className="object-cover"
                                        sizes="40px"
                                        onError={e => {
                                          const img = e.target as HTMLImageElement;
                                          img.src = '/placeholder.jpg';
                                        }}
                                      />
                                    </div>
                                    <div>
                                      <h3 className="font-bold text-lg text-foreground">
                                        {selectedDeFiPosition.protocol}
                                      </h3>
                                      <div className="flex items-center gap-2 mt-1 flex-wrap">
                                        {selectedDeFiPosition.protocolTypes ? (
                                          Array.from(selectedDeFiPosition.protocolTypes).map((type, idx) => (
                                            <Badge key={idx} variant="secondary" className="text-xs font-medium">
                                              {type.replace('_', ' ').toUpperCase()}
                                            </Badge>
                                          ))
                                        ) : (
                                          <Badge variant="secondary" className="text-xs font-medium">
                                            {selectedDeFiPosition.protocolType === 'derivatives' ? 'PERPS' : selectedDeFiPosition.protocolType.replace('_', ' ').toUpperCase()}
                                          </Badge>
                                        )}
                                        <span className="text-xs text-muted-foreground">•</span>
                                        <span className="text-xs font-medium text-muted-foreground">
                                          {selectedDeFiPosition.protocolLabel}
                                        </span>
                                      </div>
                                    </div>
                                  </div>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => setSelectedDeFiPosition(null)}
                                    className="h-8 w-8 p-0 hover:bg-destructive/10 hover:text-destructive transition-colors"
                                  >
                                    <X className="h-4 w-4" />
                                  </Button>
                                </div>
                                <div className="border-t border-border pt-3 mt-3">
                                  <div className="flex items-center justify-between mb-2">
                                    <div className="text-xs text-muted-foreground">
                                      Protocol {selectedDeFiPosition.addresses?.length > 1 ? 'Addresses' : 'Address'}
                                    </div>
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => setShowProtocolAddresses(!showProtocolAddresses)}
                                      className="h-6 text-xs px-2"
                                    >
                                      {showProtocolAddresses ? 'Hide' : 'Show'}
                                    </Button>
                                  </div>
                                  {showProtocolAddresses && (
                                    <div className="space-y-1">
                                      {(selectedDeFiPosition.addresses || [selectedDeFiPosition.address]).map((addr, idx) => (
                                        <div 
                                          key={idx} 
                                          className="text-xs font-mono bg-muted/50 p-2 rounded text-foreground break-all cursor-pointer hover:bg-muted/70 transition-colors group relative"
                                          onClick={() => copyToClipboard(addr, 'Address')}
                                        >
                                          <span>{addr}</span>
                                          <Copy className="h-3 w-3 absolute right-2 top-1/2 -translate-y-1/2 opacity-0 group-hover:opacity-50 transition-opacity" />
                                        </div>
                                      ))}
                                    </div>
                                  )}
                                </div>
                              </CardHeader>
                            </Card>

                            {/* Position Details */}
                            <Card>
                              <CardHeader>
                                <div className="flex items-center justify-between">
                                  <CardTitle className="text-lg font-semibold">Position Overview</CardTitle>
                                  <Badge variant="outline" className="font-mono">
                                    {formatCurrency(selectedDeFiPosition.totalValue)}
                                  </Badge>
                                </div>
                              </CardHeader>
                              <CardContent className="space-y-6">
                                {/* Position Summary Stats */}
                                <div className="flex flex-wrap gap-2">
                                  {selectedDeFiPosition.position.supplied?.length > 0 && (
                                    <Badge variant="secondary" className="px-3 py-1">
                                      <span className="font-medium">{selectedDeFiPosition.position.supplied.length}</span>
                                      <span className="ml-1 text-muted-foreground">Supplied</span>
                                    </Badge>
                                  )}
                                  {selectedDeFiPosition.position.borrowed?.length > 0 && (
                                    <Badge variant="secondary" className="px-3 py-1">
                                      <span className="font-medium">{selectedDeFiPosition.position.borrowed.length}</span>
                                      <span className="ml-1 text-muted-foreground">Borrowed</span>
                                    </Badge>
                                  )}
                                  {selectedDeFiPosition.position.staked?.length > 0 && (
                                    <Badge variant="secondary" className="px-3 py-1">
                                      <span className="font-medium">{selectedDeFiPosition.position.staked.length}</span>
                                      <span className="ml-1 text-muted-foreground">Staked</span>
                                    </Badge>
                                  )}
                                  {selectedDeFiPosition.position.liquidity?.length > 0 && (
                                    <Badge variant="secondary" className="px-3 py-1">
                                      <span className="font-medium">{selectedDeFiPosition.position.liquidity.length}</span>
                                      <span className="ml-1 text-muted-foreground">LP Pools</span>
                                    </Badge>
                                  )}
                                  {selectedDeFiPosition.position.derivatives?.length > 0 && (
                                    <Badge variant="secondary" className="px-3 py-1">
                                      <span className="font-medium">{selectedDeFiPosition.position.derivatives.length}</span>
                                      <span className="ml-1 text-muted-foreground">Derivatives</span>
                                    </Badge>
                                  )}
                                </div>

                                {/* Empty State */}
                                {(() => {
                                  const hasAnyPositions = 
                                    (selectedDeFiPosition.position.supplied?.length > 0) ||
                                    (selectedDeFiPosition.position.borrowed?.length > 0) ||
                                    (selectedDeFiPosition.position.staked?.length > 0) ||
                                    (selectedDeFiPosition.position.liquidity?.length > 0) ||
                                    (selectedDeFiPosition.position.derivatives?.length > 0);
                                  
                                  const hasValidPositions = 
                                    (selectedDeFiPosition.position.supplied?.some(s => s.amount !== '1' && !s.symbol.includes(selectedDeFiPosition.protocol))) ||
                                    (selectedDeFiPosition.position.borrowed?.length > 0) ||
                                    (selectedDeFiPosition.position.staked?.length > 0) ||
                                    (selectedDeFiPosition.position.liquidity?.length > 0) ||
                                    (selectedDeFiPosition.position.derivatives?.length > 0);
                                  
                                  if (!hasAnyPositions || !hasValidPositions) {
                                    return (
                                      <div className="text-center py-8 px-4">
                                        <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                                          <TrendingUp className="h-8 w-8 text-muted-foreground" />
                                        </div>
                                        <p className="text-sm text-muted-foreground">
                                          No active positions found in {selectedDeFiPosition.protocol}
                                        </p>
                                        <p className="text-xs text-muted-foreground mt-2">
                                          Positions may have been closed or are below minimum thresholds
                                        </p>
                                      </div>
                                    );
                                  }
                                  
                                  return null;
                                })()}

                                {/* Supplied Assets */}
                                {selectedDeFiPosition.position.supplied && selectedDeFiPosition.position.supplied.length > 0 && (() => {
                                  // Filter out placeholder entries
                                  const validSuppliedAssets = selectedDeFiPosition.position.supplied.filter(supply => 
                                    supply.symbol && !supply.symbol.includes('Thala') && !supply.symbol.includes('Aries') && !supply.symbol.includes('Econia') && 
                                    supply.amount !== '1' // Filter out placeholder amounts
                                  );
                                  
                                  if (validSuppliedAssets.length === 0) return null;
                                  
                                  return (
                                    <div className="space-y-3">
                                      <h4 className="text-sm font-semibold text-foreground flex items-center gap-2">
                                        <ArrowUpRight className="h-4 w-4 text-green-600" />
                                        Supplied Assets
                                      </h4>
                                      <div className="space-y-2">
                                        {validSuppliedAssets.map((supply, idx) => {
                                          const amount = parseFloat(convertRawTokenAmount(supply.amount, 8));
                                          const hasValue = amount > 0.001;
                                          
                                          return (
                                            <div key={`supplied-${idx}`} className="flex items-center justify-between p-3 rounded-lg bg-muted/30 border">
                                              <div className="flex items-center gap-3">
                                                <div className="relative w-8 h-8 rounded-full overflow-hidden bg-background border">
                                                  <Image
                                                    src={getTokenLogoUrlWithFallback(supply.symbol)}
                                                    alt={supply.symbol}
                                                    fill
                                                    className="object-cover"
                                                    sizes="32px"
                                                    onError={e => {
                                                      const img = e.target as HTMLImageElement;
                                                      img.src = '/placeholder.jpg';
                                                    }}
                                                  />
                                                </div>
                                                <div>
                                                  <div className="font-medium text-sm">{supply.symbol}</div>
                                                  <div className="text-sm text-muted-foreground font-mono">
                                                    {hasValue ? formatTokenAmount(amount, supply.symbol, { showSymbol: false }) : '< 0.001'}
                                                  </div>
                                                </div>
                                              </div>
                                              {supply.value && supply.value > MIN_VALUE_THRESHOLD && (
                                                <div className="text-right">
                                                  <div className="font-medium text-sm">{formatCurrency(supply.value)}</div>
                                                </div>
                                              )}
                                            </div>
                                          );
                                        })}
                                      </div>
                                    </div>
                                  );
                                })()}

                                {/* Borrowed Assets */}
                                {selectedDeFiPosition.position.borrowed && selectedDeFiPosition.position.borrowed.length > 0 && (
                                  <div className="space-y-3">
                                    <h4 className="text-sm font-medium text-muted-foreground uppercase tracking-wider">
                                      Borrowed
                                    </h4>
                                    <div className="grid gap-3">
                                      {selectedDeFiPosition.position.borrowed.map((borrow, idx) => {
                                        const amount = parseFloat(convertRawTokenAmount(borrow.amount, 8));
                                        const hasValue = amount > 0.001;
                                        
                                        return (
                                          <div key={`borrowed-${idx}`} className="flex items-center justify-between p-3 rounded-lg bg-muted/30 border">
                                            <div className="flex items-center gap-3">
                                              <div className="relative w-8 h-8 rounded-full overflow-hidden bg-background border">
                                                <Image
                                                  src={getTokenLogoUrlWithFallback(borrow.symbol)}
                                                  alt={borrow.symbol}
                                                  fill
                                                  className="object-cover"
                                                  sizes="32px"
                                                  onError={e => {
                                                    const img = e.target as HTMLImageElement;
                                                    img.src = '/placeholder.jpg';
                                                  }}
                                                />
                                              </div>
                                              <div>
                                                <div className="font-medium text-sm">{borrow.symbol}</div>
                                                <div className="text-sm text-muted-foreground font-mono">
                                                  {hasValue ? formatTokenAmount(amount, borrow.symbol, { showSymbol: false }) : '< 0.001'}
                                                </div>
                                              </div>
                                            </div>
                                            {borrow.value && borrow.value > MIN_VALUE_THRESHOLD && (
                                              <div className="text-right">
                                                <div className="font-medium text-sm">{formatCurrency(borrow.value)}</div>
                                              </div>
                                            )}
                                          </div>
                                        );
                                      })}
                                    </div>
                                  </div>
                                )}

                                {/* Staked Assets */}
                                {selectedDeFiPosition.position.staked && selectedDeFiPosition.position.staked.length > 0 && (
                                  <div className="space-y-3">
                                    <h4 className="text-sm font-medium text-muted-foreground uppercase tracking-wider">
                                      Staked
                                    </h4>
                                    <div className="space-y-2">
                                      {selectedDeFiPosition.position.staked.map((stake, idx) => (
                                        <div key={`staked-${idx}`} className="flex items-center justify-between p-3 rounded-lg bg-muted/30 border">
                                          <div className="flex items-center gap-3">
                                            <div className="relative w-8 h-8 rounded-full overflow-hidden bg-background border">
                                              <Image
                                                src={getTokenLogoUrlWithFallback(stake.symbol)}
                                                alt={stake.symbol}
                                                fill
                                                className="object-cover"
                                                sizes="32px"
                                                onError={e => {
                                                  const img = e.target as HTMLImageElement;
                                                  img.src = '/placeholder.jpg';
                                                }}
                                              />
                                            </div>
                                            <div>
                                              <div className="font-medium text-sm">{stake.symbol}</div>
                                              <div className="text-sm text-muted-foreground font-mono">
                                                {formatTokenAmount(convertRawTokenAmount(stake.amount, 8), stake.symbol, { showSymbol: false })}
                                              </div>
                                              {stake.rewards && (
                                                <div className="text-xs text-muted-foreground mt-0.5">
                                                  +{formatTokenAmount(convertRawTokenAmount(stake.rewards, 8), stake.symbol, { showSymbol: false })} rewards
                                                </div>
                                                )}
                                              </div>
                                            </div>
                                          </div>
                                          {stake.value && stake.value > MIN_VALUE_THRESHOLD && (
                                            <div className="text-right">
                                              <div className="font-medium text-sm">{formatCurrency(stake.value)}</div>
                                            </div>
                                          )}
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}

                                {/* Liquidity Positions */}
                                {selectedDeFiPosition.position.liquidity && selectedDeFiPosition.position.liquidity.length > 0 && (
                                  <div className="space-y-3">
                                    <h4 className="text-sm font-medium text-muted-foreground uppercase tracking-wider">
                                      Liquidity Pools
                                    </h4>
                                    <div className="space-y-2">
                                      {selectedDeFiPosition.position.liquidity.map((lp, idx) => (
                                        <div key={`liquidity-${idx}`} className="p-3 rounded-lg bg-muted/30 border">
                                          <div className="flex items-center justify-between mb-2">
                                            <div className="font-medium text-sm">
                                              {lp.token0.symbol} / {lp.token1.symbol}
                                            </div>
                                            {lp.value && lp.value > MIN_VALUE_THRESHOLD && (
                                              <div className="font-medium text-sm">
                                                {formatCurrency(lp.value)}
                                              </div>
                                            )}
                                          </div>
                                          <div className="text-xs text-muted-foreground space-y-1">
                                            <div>LP Tokens: {formatTokenAmount(convertRawTokenAmount(lp.lpTokens, 8), undefined, { showSymbol: false })}</div>
                                            <div className="flex gap-4">
                                              <span>{lp.token0.symbol}: {formatTokenAmount(convertRawTokenAmount(lp.token0.amount, 8), lp.token0.symbol, { showSymbol: false })}</span>
                                              <span>{lp.token1.symbol}: {formatTokenAmount(convertRawTokenAmount(lp.token1.amount, 8), lp.token1.symbol, { showSymbol: false })}</span>
                                            </div>
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}

                                {/* Derivatives Positions */}
                                {selectedDeFiPosition.position.derivatives && selectedDeFiPosition.position.derivatives.length > 0 && (
                                  <div className="space-y-3">
                                    <h4 className="text-sm font-medium text-muted-foreground uppercase tracking-wider">
                                      Derivatives
                                    </h4>
                                    <div className="space-y-2">
                                      {selectedDeFiPosition.position.derivatives.map((deriv, idx) => (
                                        <div key={`derivatives-${idx}`} className="flex items-center justify-between p-3 rounded-lg bg-muted/30 border">
                                          <div className="flex items-center gap-3">
                                            <div className="relative w-8 h-8 rounded-full overflow-hidden bg-background border">
                                              <Image
                                                src={getTokenLogoUrlWithFallback(deriv.symbol)}
                                                alt={deriv.symbol}
                                                fill
                                                className="object-cover"
                                                sizes="32px"
                                                onError={e => {
                                                  const img = e.target as HTMLImageElement;
                                                  img.src = '/placeholder.jpg';
                                                }}
                                              />
                                            </div>
                                            <div>
                                              <div className="font-medium text-sm">{deriv.symbol}</div>
                                              <div className="text-sm text-muted-foreground font-mono">
                                                {formatTokenAmount(convertRawTokenAmount(deriv.amount, 8), deriv.symbol, { showSymbol: false })}
                                              </div>
                                            </div>
                                          </div>
                                          <div className="flex items-center gap-2">
                                            <Badge variant="secondary" className="text-xs capitalize">
                                              {deriv.type}
                                            </Badge>
                                            {deriv.value && deriv.value > MIN_VALUE_THRESHOLD && (
                                              <div className="font-medium text-sm">
                                                {formatCurrency(deriv.value)}
                                              </div>
                                            )}
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}
                              </CardContent>
                            </Card>
                          </div>
                        ) : (
                          /* Overall DeFi Portfolio Stats */
                          <Card>
                            <CardHeader>
                              <CardTitle className="text-lg font-semibold flex items-center gap-2">
                                <TrendingUp className="h-5 w-5 text-primary" />
                                DeFi Portfolio Overview
                              </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-6">
                              {defiPositionsLoading ? (
                                <div className="space-y-4">
                                  {Array.from({ length: 4 }).map((_, i) => (
                                    <Skeleton key={i} className="h-16 w-full" />
                                  ))}
                                </div>
                              ) : groupedDeFiPositions && groupedDeFiPositions.length > 0 ? (
                                <>
                                  {/* Overall Stats */}
                                  <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                                    <div className="bg-background rounded-lg p-4 border">
                                      <div className="text-sm font-medium text-muted-foreground mb-1">
                                        Total Positions
                                      </div>
                                      <div className="text-2xl font-bold text-foreground">
                                        {groupedDeFiPositions.reduce((acc, g) => acc + g.positions.length, 0)}
                                      </div>
                                    </div>
                                    <div className="bg-background rounded-lg p-4 border">
                                      <div className="text-sm font-medium text-muted-foreground mb-1">
                                        Total Supplied
                                      </div>
                                      <div className="text-2xl font-bold text-foreground">
                                        {groupedDeFiPositions.reduce((acc, g) => acc + (g.position.supplied?.length || 0), 0)}
                                      </div>
                                    </div>
                                    <div className="bg-background rounded-lg p-4 border">
                                      <div className="text-sm font-medium text-muted-foreground mb-1">
                                        Total Borrowed
                                      </div>
                                      <div className="text-2xl font-bold text-foreground">
                                        {groupedDeFiPositions.reduce((acc, g) => acc + (g.position.borrowed?.length || 0), 0)}
                                      </div>
                                    </div>
                                    <div className="bg-background rounded-lg p-4 border">
                                      <div className="text-sm font-medium text-muted-foreground mb-1">
                                        Active Protocols
                                      </div>
                                      <div className="text-2xl font-bold text-foreground">
                                        {groupedDeFiPositions.length}
                                      </div>
                                    </div>
                                  </div>

                                  {/* Additional Stats */}
                                  <div className="space-y-4">
                                    <div className="grid grid-cols-2 gap-4">
                                      <div className="bg-muted/30 rounded-lg p-4">
                                        <div className="text-sm font-medium text-muted-foreground mb-1">
                                          Total DeFi Value
                                        </div>
                                        <div className="text-xl font-bold text-foreground">
                                          {formatCurrency(groupedDeFiPositions.reduce((acc, g) => acc + g.totalValue, 0))}
                                        </div>
                                      </div>
                                      <div className="bg-muted/30 rounded-lg p-4">
                                        <div className="text-sm font-medium text-muted-foreground mb-1">
                                          Protocol Types
                                        </div>
                                        <div className="text-xl font-bold text-foreground">
                                          {(() => {
                                            const types = new Set();
                                            groupedDeFiPositions.forEach(g => {
                                              g.protocolTypes.forEach(type => types.add(type));
                                            });
                                            return types.size;
                                          })()}
                                        </div>
                                      </div>
                                    </div>
                                    
                                    {/* View All Link */}
                                    <div className="pt-2">
                                      <Link href="/defi" className="w-full">
                                        <Button variant="outline" className="w-full group">
                                          <span>Explore All DeFi Protocols</span>
                                          <ArrowUpRight className="ml-2 h-4 w-4 group-hover:translate-x-0.5 group-hover:-translate-y-0.5 transition-transform" />
                                        </Button>
                                      </Link>
                                    </div>
                                  </div>
                                </>
                              ) : (
                                <div className="text-center py-8 text-muted-foreground">
                                  <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                                    <TrendingUp className="h-8 w-8" />
                                  </div>
                                  <p className="text-lg font-medium mb-2">No DeFi Positions Found</p>
                                  <p className="text-sm">Connect to DeFi protocols on Aptos to see your positions here</p>
                                </div>
                              )}
                            </CardContent>
                          </Card>
                        )}
                      </div>
                    )}
                  </TabsContent>

                  <TabsContent value="transactions" className="space-y-4">
                    <Card className="bg-background">
                      <CardHeader>
                        <CardTitle>Transaction History</CardTitle>
                      </CardHeader>
                      <CardContent>
                        {transactionHistoryLoading ? (
                          <div className="space-y-3">
                            {Array.from({ length: 10 }).map((_, i) => (
                              <div
                                key={i}
                                className="flex items-center space-x-4 p-3 bg-card border rounded-lg"
                              >
                                <Skeleton className="h-8 w-8 rounded" />
                                <div className="flex-1 space-y-2">
                                  <Skeleton className="h-4 w-1/4" />
                                  <Skeleton className="h-3 w-3/4" />
                                </div>
                                <Skeleton className="h-4 w-20" />
                              </div>
                            ))}
                          </div>
                        ) : transactionHistory?.data &&
                          transactionHistory.data.length > 0 ? (
                          <div className="space-y-2">
                            {transactionHistory.data.slice(0, 50).map(tx => (
                              <div
                                key={tx.version || tx.hash}
                                className="flex items-center justify-between p-3 bg-card border rounded-lg hover:bg-accent/50 transition-colors cursor-pointer"
                                onClick={() => {
                                  setSelectedTransaction(tx);
                                  setIsTransactionDialogOpen(true);
                                }}
                              >
                                <div className="flex items-center space-x-3">
                                  <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                                    <span className="text-xs font-semibold text-primary">
                                      {(() => {
                                        const type =
                                          tx.type?.toLowerCase() || '';
                                        if (
                                          type.includes('deposit') ||
                                          type.includes('mint')
                                        )
                                          return '↓';
                                        if (
                                          type.includes('withdraw') ||
                                          type.includes('burn')
                                        )
                                          return '↑';
                                        if (
                                          type.includes('swap') ||
                                          type.includes('exchange')
                                        )
                                          return '↔';
                                        if (type.includes('transfer'))
                                          return '→';
                                        if (
                                          type.includes('gasfee') ||
                                          type.includes('gas')
                                        )
                                          return '⛽';
                                        if (
                                          type.includes('claim') ||
                                          type.includes('reward')
                                        )
                                          return '🎁';
                                        return 'T';
                                      })()}
                                    </span>
                                  </div>
                                  <div className="flex-1">
                                    <p className="text-sm font-medium">
                                      {(() => {
                                        const type =
                                          tx.type?.toLowerCase() || '';
                                        if (
                                          type.includes('deposit') ||
                                          type.includes('mint')
                                        )
                                          return 'Deposit';
                                        if (
                                          type.includes('withdraw') ||
                                          type.includes('burn')
                                        )
                                          return 'Withdrawal';
                                        if (
                                          type.includes('swap') ||
                                          type.includes('exchange')
                                        )
                                          return 'Swap';
                                        if (type.includes('transfer'))
                                          return 'Transfer';
                                        if (
                                          type.includes('gasfee') ||
                                          type.includes('gas')
                                        )
                                          return 'Gas Fee';
                                        if (
                                          type.includes('claim') ||
                                          type.includes('reward')
                                        )
                                          return 'Claim Reward';
                                        return 'Transaction';
                                      })()}
                                    </p>
                                    <div className="flex items-center space-x-2 text-xs text-muted-foreground">
                                      <span>
                                        {new Date(
                                          tx.timestamp
                                        ).toLocaleDateString()}{' '}
                                        {new Date(
                                          tx.timestamp
                                        ).toLocaleTimeString()}
                                      </span>
                                      {tx.version && (
                                        <span>• Version {tx.version}</span>
                                      )}
                                    </div>
                                  </div>
                                </div>
                                <div className="text-right">
                                  {tx.amount && tx.currency && (
                                    <div className="space-y-1">
                                      <p className="text-sm font-mono">
                                        {(() => {
                                          const type =
                                            tx.type?.toLowerCase() || '';
                                          const isOutgoing =
                                            type.includes('withdraw') ||
                                            type.includes('burn') ||
                                            type.includes('gasfee');
                                          const sign = isOutgoing ? '-' : '+';

                                          // Format amount to be more readable
                                          const amount = parseFloat(tx.amount);
                                          let formattedAmount;

                                          if (amount >= 1000000) {
                                            formattedAmount =
                                              (amount / 1000000).toFixed(2) +
                                              'M';
                                          } else if (amount >= 1000) {
                                            formattedAmount =
                                              (amount / 1000).toFixed(2) + 'K';
                                          } else if (amount < MIN_VALUE_THRESHOLD) {
                                            formattedAmount =
                                              amount.toExponential(2);
                                          } else {
                                            formattedAmount = amount.toFixed(4);
                                          }

                                          // Clean up currency name
                                          let cleanCurrency = tx.currency;
                                          if (cleanCurrency.includes('>')) {
                                            cleanCurrency =
                                              cleanCurrency.split('>')[0];
                                          }
                                          if (cleanCurrency.length > 10) {
                                            cleanCurrency =
                                              cleanCurrency.substring(0, 8) +
                                              '...';
                                          }

                                          return `${sign}${formattedAmount} ${cleanCurrency}`;
                                        })()}
                                      </p>
                                      {tx.success !== undefined && (
                                        <span
                                          className={`text-xs px-2 py-1 rounded ${
                                            tx.success
                                              ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                                              : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                                          }`}
                                        >
                                          {tx.success ? 'Success' : 'Failed'}
                                        </span>
                                      )}
                                    </div>
                                  )}
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="text-center py-8 text-muted-foreground">
                            <p>No transactions found</p>
                          </div>
                        )}
                      </CardContent>
                    </Card>

                    {/* Transaction Details Dialog */}
                    <Dialog
                      open={isTransactionDialogOpen}
                      onOpenChange={setIsTransactionDialogOpen}
                    >
                      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
                        <DialogHeader>
                          <DialogTitle>Transaction Details</DialogTitle>
                        </DialogHeader>
                        {selectedTransaction && (
                          <div className="space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium text-muted-foreground">
                                  Type
                                </label>
                                <p className="text-sm">
                                  {selectedTransaction.type === 'coin_deposit'
                                    ? 'Deposit'
                                    : selectedTransaction.type ===
                                        'coin_withdraw'
                                      ? 'Withdrawal'
                                      : selectedTransaction.type ===
                                          'token_mint'
                                        ? 'Mint'
                                        : selectedTransaction.type ===
                                            'token_burn'
                                          ? 'Burn'
                                          : selectedTransaction.type ===
                                              'token_swap'
                                            ? 'Swap'
                                            : selectedTransaction.type ||
                                              'Transaction'}
                                </p>
                              </div>
                              <div>
                                <label className="text-sm font-medium text-muted-foreground">
                                  Status
                                </label>
                                <div className="flex items-center mt-1">
                                  <span
                                    className={`text-xs px-2 py-1 rounded ${
                                      selectedTransaction.success
                                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                                        : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                                    }`}
                                  >
                                    {selectedTransaction.success
                                      ? 'Success'
                                      : 'Failed'}
                                  </span>
                                </div>
                              </div>
                              <div>
                                <label className="text-sm font-medium text-muted-foreground">
                                  Date & Time
                                </label>
                                <p className="text-sm font-mono">
                                  {new Date(
                                    selectedTransaction.timestamp
                                  ).toLocaleString()}
                                </p>
                              </div>
                              {selectedTransaction.version && (
                                <div>
                                  <label className="text-sm font-medium text-muted-foreground">
                                    Version
                                  </label>
                                  <p className="text-sm font-mono">
                                    {selectedTransaction.version}
                                  </p>
                                </div>
                              )}
                              {selectedTransaction.hash && (
                                <div className="col-span-2">
                                  <label className="text-sm font-medium text-muted-foreground">
                                    Transaction Hash
                                  </label>
                                  <p className="text-sm font-mono break-all">
                                    {selectedTransaction.hash}
                                  </p>
                                </div>
                              )}
                              {selectedTransaction.amount &&
                                selectedTransaction.currency && (
                                  <div>
                                    <label className="text-sm font-medium text-muted-foreground">
                                      Amount
                                    </label>
                                    <p className="text-sm font-mono">
                                      {selectedTransaction.type ===
                                        'coin_withdraw' ||
                                      selectedTransaction.type === 'token_burn'
                                        ? '-'
                                        : '+'}
                                      {selectedTransaction.amount}{' '}
                                      {selectedTransaction.currency}
                                    </p>
                                  </div>
                                )}
                              {selectedTransaction.gas_used && (
                                <div>
                                  <label className="text-sm font-medium text-muted-foreground">
                                    Gas Used
                                  </label>
                                  <p className="text-sm font-mono">
                                    {selectedTransaction.gas_used}
                                  </p>
                                </div>
                              )}
                            </div>

                            {selectedTransaction.changes &&
                              selectedTransaction.changes.length > 0 && (
                                <div>
                                  <label className="text-sm font-medium text-muted-foreground">
                                    Changes
                                  </label>
                                  <div className="mt-2 space-y-2 max-h-40 overflow-y-auto">
                                    {selectedTransaction.changes.map(
                                      (change: any, index: number) => (
                                        <div
                                          key={index}
                                          className="p-2 bg-muted rounded text-sm"
                                        >
                                          <pre className="whitespace-pre-wrap text-xs">
                                            {JSON.stringify(change, null, 2)}
                                          </pre>
                                        </div>
                                      )
                                    )}
                                  </div>
                                </div>
                              )}

                            {selectedTransaction.events &&
                              selectedTransaction.events.length > 0 && (
                                <div>
                                  <label className="text-sm font-medium text-muted-foreground">
                                    Events
                                  </label>
                                  <div className="mt-2 space-y-2 max-h-40 overflow-y-auto">
                                    {selectedTransaction.events.map(
                                      (event: any, index: number) => (
                                        <div
                                          key={index}
                                          className="p-2 bg-muted rounded text-sm"
                                        >
                                          <p className="font-medium">
                                            {event.type}
                                          </p>
                                          <pre className="whitespace-pre-wrap text-xs mt-1">
                                            {JSON.stringify(
                                              event.data,
                                              null,
                                              2
                                            )}
                                          </pre>
                                        </div>
                                      )
                                    )}
                                  </div>
                                </div>
                              )}
                          </div>
                        )}
                      </DialogContent>
                    </Dialog>
                  </TabsContent>
                </Tabs>
              </div>
            </div>
          </>
        )}
      </main>

      <Footer />
    </div>
  );
}
